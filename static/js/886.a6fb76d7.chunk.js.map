{"version":3,"file":"static/js/886.a6fb76d7.chunk.js","mappings":"mIAEA,MAAMA,EAAY,CACd,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,E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","sources":["components/games/pacMan/models/grid.js","components/games/pacMan/models/movingCharacter.js","components/games/pacMan/gameController.js","components/games/pacMan/models/pacMan.js","components/games/pacMan/models/ghost.js","components/games/pacMan/models/game.js","components/games/pacMan/gameView.js","components/games/pacMan/main.js"],"sourcesContent":["import Game from './game.js';\r\n\r\nconst initField = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n    [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],\r\n    [1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1],\r\n    [1, 3, 1, 0, 0, 1, 2, 1, 0, 0, 0, 1, 2, 1, 1, 2, 1, 0, 0, 0, 1, 2, 1, 0, 0, 1, 3, 1],\r\n    [1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1],\r\n    [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],\r\n    [1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1],\r\n    [1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1],\r\n    [1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1],\r\n    [1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1],\r\n    [0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 1, 1, 1, 7, 7, 1, 1, 1, 2, 1, 1, 2, 1, 0, 0, 0, 0, 0],\r\n    [1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 6, 6, 6, 6, 6, 6, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1],\r\n    [4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 1, 6, 6, 6, 6, 6, 6, 1, 2, 2, 2, 2, 0, 0, 0, 0, 0, 4],\r\n    [1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 6, 6, 6, 6, 6, 6, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1],\r\n    [0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 0, 0, 0, 0, 0],\r\n    [1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1],\r\n    [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],\r\n    [1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1],\r\n    [1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1],\r\n    [1, 3, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 3, 1],\r\n    [1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1],\r\n    [1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1],\r\n    [1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1],\r\n    [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1],\r\n    [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1],\r\n    [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n];\r\n\r\nclass Grid {\r\n    constructor(game) {\r\n        this.marking = initField;\r\n        this.cellSize = 20;\r\n        this.colsNum = this.marking[0].length;\r\n        this.rowsNum = this.marking.length;\r\n        this.height = this.cellSize * this.rowsNum;\r\n        this.width = this.cellSize * this.colsNum;\r\n\r\n        this.dotsNumber = 0;\r\n        this.map = this.createMap();\r\n    }\r\n\r\n    createMap() {\r\n        const result = [];\r\n\r\n        let portal;\r\n\r\n        this.marking.forEach((row, rowInd) => {\r\n            result[rowInd] = [];\r\n            row.forEach((cellType, colInd) => {\r\n                const cell = {\r\n                    x: colInd * this.cellSize + this.cellSize / 2,\r\n                    y: rowInd * this.cellSize + this.cellSize / 2,\r\n                    type: cellType,\r\n                    rowInd,\r\n                    colInd,\r\n                };\r\n                switch (cellType) {\r\n                    case Game.CELL_TYPE.LITTLE_DOT:\r\n                    case Game.CELL_TYPE.BIG_DOT:\r\n                        this.dotsNumber++;\r\n                        break;\r\n                    case Game.CELL_TYPE.PORTAL:\r\n                        if (portal) {\r\n                            portal.exitPortal = cell;\r\n                            cell.exitPortal = portal;\r\n                        } else {\r\n                            portal = cell;\r\n                        }\r\n                        this.exitPoint = this.leftPortal;\r\n                        this.rightPortal = cell;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                result[rowInd][colInd] = cell;\r\n            });\r\n        });\r\n        return result;\r\n    }\r\n\r\n    getCellByCoords(x, y) {\r\n        let rowInd = Math.floor(y / this.cellSize);\r\n        let colInd = Math.floor(x / this.cellSize);\r\n        return this.map[rowInd][colInd];\r\n    }\r\n\r\n    checkDirection(x, y, direction, isGhostHomeOpened) {\r\n        const checkedX = x + direction.x * this.cellSize;\r\n        const checkedY = y + direction.y * this.cellSize;\r\n\r\n        const checkedCell = this.getCellByCoords(checkedX, checkedY);\r\n\r\n        if (checkedCell.type === Game.CELL_TYPE.GHOST_HOME_DOOR) {\r\n            return isGhostHomeOpened;\r\n        }\r\n        if (checkedCell.type === Game.CELL_TYPE.WALL) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default Grid;\r\n","import Game from './game.js';\r\n\r\nclass MovingCharacter {\r\n    constructor(game) {\r\n        this.game = game;\r\n        this.x = null;\r\n        this.y = null;\r\n        this.direction = null;\r\n        this.stepSize = null;\r\n    }\r\n\r\n    isInCenterCell() {\r\n        const cellSize = this.game.grid.cellSize;\r\n\r\n        const isXInCenterCell = (this.x - cellSize / 2) % cellSize === 0;\r\n        const isYInCenterCell = (this.y - cellSize / 2) % cellSize === 0;\r\n\r\n        return isXInCenterCell && isYInCenterCell;\r\n    }\r\n\r\n    move() {\r\n        this.x = this.x + this.direction.x * this.stepSize;\r\n        this.y = this.y + this.direction.y * this.stepSize;\r\n    }\r\n\r\n    checkAndHandlePortalCollision() {\r\n        const cell = this.game.grid.getCellByCoords(this.x, this.y);\r\n        if (cell.type === Game.CELL_TYPE.PORTAL) {\r\n            this.x = cell.exitPortal.x;\r\n            this.y = cell.exitPortal.y;\r\n        }\r\n    }\r\n\r\n    isDirectionsOpposite(checkedDirection) {\r\n        return (\r\n            this.direction.x === -checkedDirection.x &&\r\n            this.direction.y === -checkedDirection.y\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovingCharacter;\r\n","import Game from './models/game.js';\r\n\r\nclass GameController {\r\n    constructor(game, view) {\r\n        this.game = game;\r\n        this.view = view;\r\n        this.startButton = document.getElementById('startButton');\r\n        this.stopButton = document.getElementById('pauseButton');\r\n        this.continueButton = document.getElementById('continueButton');\r\n        this.rightButton = document.getElementById('rightButton');\r\n        this.leftButton = document.getElementById('leftButton');\r\n        this.upButton = document.getElementById('upButton');\r\n        this.downButton = document.getElementById('downButton');\r\n\r\n        this.keyDownHandler = this.keyDownHandler.bind(this);\r\n\r\n        this.startButton.addEventListener('click', () => {\r\n            this.game.start();\r\n        });\r\n        this.continueButton.addEventListener('click', () => {\r\n            this.game.continue();\r\n        });\r\n        this.stopButton.addEventListener('click', () => {\r\n            this.game.setPause();\r\n        });\r\n        this.rightButton.addEventListener('click', () =>\r\n            this.game.pacMan.setNewDirection(GameController.DIRECTION.RIGHT)\r\n        );\r\n        this.leftButton.addEventListener('click', () =>\r\n            this.game.pacMan.setNewDirection(GameController.DIRECTION.LEFT)\r\n        );\r\n        this.upButton.addEventListener('click', () =>\r\n            this.game.pacMan.setNewDirection(GameController.DIRECTION.UP)\r\n        );\r\n        this.downButton.addEventListener('click', () =>\r\n            this.game.pacMan.setNewDirection(GameController.DIRECTION.DOWN)\r\n        );\r\n\r\n        document.addEventListener('keydown', this.keyDownHandler);\r\n    }\r\n\r\n    keyDownHandler(e) {\r\n        if (e.key === 'Right' || e.key === 'ArrowRight') {\r\n            this.game.pacMan.setNewDirection(Game.DIRECTION.RIGHT);\r\n        } else if (e.key === 'Left' || e.key === 'ArrowLeft') {\r\n            this.game.pacMan.setNewDirection(Game.DIRECTION.LEFT);\r\n        } else if (e.key === 'Up' || e.key === 'ArrowUp') {\r\n            this.game.pacMan.setNewDirection(Game.DIRECTION.UP);\r\n        } else if (e.key === 'Down' || e.key === 'ArrowDown') {\r\n            this.game.pacMan.setNewDirection(Game.DIRECTION.DOWN);\r\n        }\r\n    }\r\n}\r\n\r\nGameController.DIRECTION = {\r\n    RIGHT: 'right',\r\n    LEFT: 'left',\r\n    UP: 'up',\r\n    DOWN: 'down',\r\n};\r\n\r\nexport default GameController;\r\n","import GameController from '../gameController.js';\r\n\r\nimport MovingCharacter from './movingCharacter.js';\r\n\r\nclass PacMan extends MovingCharacter {\r\n    constructor(game) {\r\n        super();\r\n        this.game = game;\r\n        this.stepSize = 2;\r\n\r\n        this.setInitParams();\r\n    }\r\n\r\n    setInitParams() {\r\n        var grid = this.game.grid;\r\n        this.x = grid.width / 2;\r\n        this.y = 26 * grid.cellSize + grid.cellSize / 2;\r\n        this.direction = { x: 1, y: 0 };\r\n    }\r\n\r\n    setNewDirection(direction) {\r\n        this.newDirection = { x: 0, y: 0 };\r\n        switch (direction) {\r\n            case GameController.DIRECTION.RIGHT:\r\n                this.newDirection.x = 1;\r\n                break;\r\n            case GameController.DIRECTION.LEFT:\r\n                this.newDirection.x = -1;\r\n                break;\r\n            case GameController.DIRECTION.DOWN:\r\n                this.newDirection.y = 1;\r\n                break;\r\n            case GameController.DIRECTION.UP:\r\n                this.newDirection.y = -1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (this.isDirectionsOpposite(this.newDirection)) {\r\n            this.updateDirection();\r\n        }\r\n    }\r\n\r\n    update() {\r\n        if (this.isInCenterCell()) {\r\n            this.checkAndHandlePortalCollision();\r\n            this.updateDirection();\r\n            if (!this.game.grid.checkDirection(this.x, this.y, this.direction)) {\r\n                return;\r\n            }\r\n        }\r\n        this.move();\r\n    }\r\n\r\n    updateDirection() {\r\n        if (\r\n            this.newDirection &&\r\n            this.game.grid.checkDirection(this.x, this.y, this.newDirection)\r\n        ) {\r\n            this.direction = this.newDirection;\r\n            this.newDirection = undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport default PacMan;\r\n","import Game from './game.js';\r\nimport MovingCharacter from './movingCharacter.js';\r\n\r\nclass Ghost extends MovingCharacter {\r\n    constructor(game, type) {\r\n        super();\r\n        this.game = game;\r\n        this.type = type;\r\n\r\n        this.targetForScattering = this.getTargetForScattering();\r\n        this.targetForGoingOut = {\r\n            x: this.game.grid.width / 2,\r\n            y: 14 * this.game.grid.cellSize + this.game.grid.cellSize / 2,\r\n        };\r\n        this.targetForGoingToRespawn = {\r\n            x: this.game.grid.width / 2,\r\n            y: 17 * this.game.grid.cellSize + this.game.grid.cellSize / 2,\r\n        };\r\n\r\n        this.setInitParams();\r\n    }\r\n\r\n    setInitParams() {\r\n        this.direction = { x: -1, y: 0 };\r\n        this.stepSize = 2;\r\n        this.frightenedTimeout = null;\r\n\r\n        const cellSize = this.game.grid.cellSize;\r\n        const gridWidth = this.game.grid.width;\r\n        if (this.type === Game.GHOST_TYPE.RED) {\r\n            const rowInd = 14;\r\n            this.x = gridWidth / 2;\r\n            this.y = rowInd * cellSize + cellSize / 2;\r\n            this.state = Game.GHOST_STATE.IS_SCATTERING;\r\n        } else if (this.type === Game.GHOST_TYPE.PINK) {\r\n            const rowInd = 17;\r\n            this.x = gridWidth / 2 - cellSize;\r\n            this.y = rowInd * cellSize + cellSize / 2;\r\n            this.state = Game.GHOST_STATE.IS_GOING_OUT;\r\n        } else if (this.type === Game.GHOST_TYPE.BLUE) {\r\n            const rowInd = 17;\r\n            this.x = gridWidth / 2;\r\n            this.y = rowInd * cellSize + cellSize / 2;\r\n            this.state = Game.GHOST_STATE.IS_SCATTERING;\r\n        } else if (this.type === Game.GHOST_TYPE.ORANGE) {\r\n            const rowInd = 17;\r\n            this.x = gridWidth / 2 + cellSize;\r\n            this.y = rowInd * cellSize + cellSize / 2;\r\n            this.state = Game.GHOST_STATE.IS_SCATTERING;\r\n        }\r\n    }\r\n\r\n    get state() {\r\n        return this._state;\r\n    }\r\n\r\n    set state(state) {\r\n        this._state = state;\r\n        if (this.isBlinking) {\r\n            this.isBlinking = false;\r\n        }\r\n        if (this.blinkingTimeout) {\r\n            clearTimeout(this.blinkingTimeout);\r\n        }\r\n    }\r\n\r\n    getTargetForScattering() {\r\n        switch (this.type) {\r\n            case Game.GHOST_TYPE.RED:\r\n                return {\r\n                    x: 26 * this.game.grid.map.length - this.game.grid.cellSize / 2,\r\n                    y: this.game.grid.cellSize / 2,\r\n                };\r\n            case Game.GHOST_TYPE.PINK:\r\n                return {\r\n                    x: 3 * this.game.grid.cellSize - this.game.grid.cellSize / 2,\r\n                    y: this.game.grid.cellSize / 2,\r\n                };\r\n            case Game.GHOST_TYPE.BLUE:\r\n                return {\r\n                    x: 26 * this.game.grid.cellSize - this.game.grid.cellSize / 2,\r\n                    y:\r\n                        this.game.grid.map.length * this.game.grid.cellSize -\r\n                        this.game.grid.cellSize / 2,\r\n                };\r\n            case Game.GHOST_TYPE.ORANGE:\r\n                return {\r\n                    x: 3 * this.game.grid.cellSize - this.game.grid.cellSize / 2,\r\n                    y:\r\n                        this.game.grid.map.length * this.game.grid.cellSize -\r\n                        this.game.grid.cellSize / 2,\r\n                };\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getTargetForChasing() {\r\n        const pacMan = this.game.pacMan;\r\n        const targetFinder = {\r\n            [Game.GHOST_TYPE.RED]: function () {\r\n                return { x: pacMan.x, y: pacMan.y };\r\n            },\r\n\r\n            [Game.GHOST_TYPE.PINK]: function () {\r\n                const cellSize = this.game.grid.cellSize;\r\n                const offset = 4;\r\n                return {\r\n                    x: pacMan.x + pacMan.direction.x * offset * cellSize,\r\n                    y: pacMan.y + pacMan.direction.y * offset * cellSize,\r\n                };\r\n            }.bind(this),\r\n\r\n            [Game.GHOST_TYPE.BLUE]: function () {\r\n                const redGhost = this.game.ghostsStore[Game.GHOST_TYPE.RED];\r\n                const vectorX = 2 * (redGhost.x - pacMan.x);\r\n                const vectorY = 2 * (redGhost.y - pacMan.y);\r\n                return { x: redGhost.x + vectorX, y: redGhost.y + vectorY };\r\n            }.bind(this),\r\n\r\n            [Game.GHOST_TYPE.ORANGE]: function () {\r\n                const cellSize = this.game.grid.cellSize;\r\n                const toPacManDistance = Math.sqrt(\r\n                    Math.pow(this.x - pacMan.x, 2) + Math.pow(this.y - pacMan.y, 2)\r\n                );\r\n                const detectionDistance = 8 * cellSize;\r\n                if (toPacManDistance > detectionDistance) {\r\n                    return {\r\n                        x: this.targetForScattering.x,\r\n                        y: this.targetForScattering.y,\r\n                    };\r\n                } else {\r\n                    return { x: pacMan.x, y: pacMan.y };\r\n                }\r\n            }.bind(this),\r\n        };\r\n        return targetFinder[this.type]();\r\n    }\r\n\r\n    setFright() {\r\n        if (\r\n            this.isInHome() ||\r\n            this.isInDoor() ||\r\n            this.state === Game.GHOST_STATE.IS_GOING_TO_RESPAWN\r\n        ) {\r\n            return;\r\n        }\r\n        const frightPeriod = 15000;\r\n        const blinkPeriod = 3000;\r\n\r\n        this.state = Game.GHOST_STATE.IS_FRIGHTENED;\r\n        this.direction.x = -this.direction.x;\r\n        this.direction.y = -this.direction.y;\r\n\r\n        if (this.frightenedTimeout) {\r\n            clearTimeout(this.frightenedTimeout);\r\n        }\r\n        this.frightenedTimeout = setTimeout(() => {\r\n            this.state = Game.GHOST_STATE.IS_CHASING;\r\n        }, frightPeriod);\r\n        this.blinkingTimeout = setTimeout(() => {\r\n            this.isBlinking = true;\r\n        }, frightPeriod - blinkPeriod);\r\n    }\r\n\r\n    goToRespawn() {\r\n        this.state = Game.GHOST_STATE.IS_GOING_TO_RESPAWN;\r\n    }\r\n\r\n    isInHome() {\r\n        const curCell = this.game.grid.getCellByCoords(this.x, this.y);\r\n        return curCell.type === Game.CELL_TYPE.GHOST_HOME;\r\n    }\r\n\r\n    isInDoor() {\r\n        const curCell = this.game.grid.getCellByCoords(this.x, this.y);\r\n        return curCell.type === Game.CELL_TYPE.GHOST_HOME_DOOR;\r\n    }\r\n\r\n    isScatterTime() {\r\n        const lifeTimeInSec = Math.round((Date.now() - this.game.startTime) / 1000);\r\n        return (\r\n            lifeTimeInSec < 7 ||\r\n            (lifeTimeInSec > 27 && lifeTimeInSec < 34) ||\r\n            (lifeTimeInSec > 54 && lifeTimeInSec < 61) ||\r\n            (lifeTimeInSec > 81 && lifeTimeInSec < 85)\r\n        );\r\n    }\r\n\r\n    getTarget() {\r\n        switch (this.state) {\r\n            case Game.GHOST_STATE.IS_SCATTERING:\r\n                return this.targetForScattering;\r\n            case Game.GHOST_STATE.IS_CHASING:\r\n                return this.getTargetForChasing();\r\n            case Game.GHOST_STATE.IS_FRIGHTENED:\r\n                return null;\r\n            case Game.GHOST_STATE.IS_GOING_TO_RESPAWN:\r\n                return this.targetForGoingToRespawn;\r\n            case Game.GHOST_STATE.IS_GOING_OUT:\r\n                return this.targetForGoingOut;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getDistanceToTarget(x, y) {\r\n        let target = this.getTarget();\r\n        return Math.sqrt(Math.pow(target.x - x, 2) + Math.pow(target.y - y, 2));\r\n    }\r\n\r\n    getNextCellCenterCoords(direction) {\r\n        return {\r\n            x: this.x + direction.x * this.game.grid.cellSize,\r\n            y: this.y + direction.y * this.game.grid.cellSize,\r\n        };\r\n    }\r\n\r\n    getNewDirection() {\r\n        const directions = [];\r\n        [\r\n            { x: 1, y: 0 },\r\n            { x: -1, y: 0 },\r\n            { x: 0, y: -1 },\r\n            { x: 0, y: 1 },\r\n        ].forEach((direction) => {\r\n            if (!this.isDirectionsOpposite(direction)) {\r\n                const isHomeOpened =\r\n                    this.state === Game.GHOST_STATE.IS_GOING_OUT ||\r\n                    this.state === Game.GHOST_STATE.IS_GOING_TO_RESPAWN;\r\n                if (\r\n                    this.game.grid.checkDirection(this.x, this.y, direction, isHomeOpened)\r\n                ) {\r\n                    directions.push({ ...direction });\r\n                }\r\n            }\r\n        });\r\n\r\n        if (directions.length === 1) {\r\n            return directions[0];\r\n        }\r\n\r\n        if (this.state === Game.GHOST_STATE.IS_FRIGHTENED) {\r\n            return directions[Math.floor(Math.random() * directions.length)];\r\n        }\r\n\r\n        let optimalDirectionInd, curDistance;\r\n        directions.forEach((direction, ind) => {\r\n            const { x, y } = this.getNextCellCenterCoords(direction);\r\n            const distance = this.getDistanceToTarget(x, y);\r\n            if (!curDistance || distance < curDistance) {\r\n                curDistance = distance;\r\n                optimalDirectionInd = ind;\r\n            }\r\n        });\r\n\r\n        return directions[optimalDirectionInd];\r\n    }\r\n\r\n    update() {\r\n        if (this.isInCenterCell()) {\r\n            this.checkAndHandlePortalCollision();\r\n            this.direction = this.getNewDirection();\r\n\r\n            if (this.state === Game.GHOST_STATE.IS_FRIGHTENED) {\r\n                this.stepSize = Game.STEP_SIZE.LITTLE;\r\n            } else if (this.state === Game.GHOST_STATE.IS_GOING_TO_RESPAWN) {\r\n                this.stepSize = Game.STEP_SIZE.BIG;\r\n            } else {\r\n                this.stepSize = Game.STEP_SIZE.NORMAL;\r\n            }\r\n\r\n            if (this.isInHome()) {\r\n                if (this.state === Game.GHOST_STATE.IS_GOING_TO_RESPAWN) {\r\n                    this.state = Game.GHOST_STATE.IS_GOING_OUT;\r\n                }\r\n                if (this.game.score > 30 && this.type === Game.GHOST_TYPE.BLUE) {\r\n                    this.state = Game.GHOST_STATE.IS_GOING_OUT;\r\n                } else if (this.game.score > 90 && this.type === Game.GHOST_TYPE.ORANGE) {\r\n                    this.state = Game.GHOST_STATE.IS_GOING_OUT;\r\n                }\r\n            } else {\r\n                if (this.isScatterTime()) {\r\n                    if (\r\n                        this.state === Game.GHOST_STATE.IS_GOING_OUT ||\r\n                        this.state === Game.GHOST_STATE.IS_CHASING\r\n                    ) {\r\n                        this.state = Game.GHOST_STATE.IS_SCATTERING;\r\n                    }\r\n                } else {\r\n                    if (\r\n                        this.state === Game.GHOST_STATE.IS_SCATTERING ||\r\n                        this.state === Game.GHOST_STATE.IS_GOING_OUT\r\n                    ) {\r\n                        this.state = Game.GHOST_STATE.IS_CHASING;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.move();\r\n    }\r\n}\r\n\r\nexport default Ghost;\r\n","import Grid from './grid.js';\r\nimport MovingCharacter from './movingCharacter.js';\r\nimport PacMan from './pacMan.js';\r\nimport Ghost from './ghost.js';\r\n\r\nclass Game {\r\n    constructor() {\r\n        this.setInitParams();\r\n    }\r\n\r\n    setInitParams() {\r\n        this.movingCharacter = new MovingCharacter(this);\r\n        this.grid = new Grid(this);\r\n        this.field = this.grid.map;\r\n        this.pacMan = new PacMan(this);\r\n        this.ghostsStore = {\r\n            [Game.GHOST_TYPE.RED]: new Ghost(this, Game.GHOST_TYPE.RED),\r\n            [Game.GHOST_TYPE.PINK]: new Ghost(this, Game.GHOST_TYPE.PINK),\r\n            [Game.GHOST_TYPE.BLUE]: new Ghost(this, Game.GHOST_TYPE.BLUE),\r\n            [Game.GHOST_TYPE.ORANGE]: new Ghost(this, Game.GHOST_TYPE.ORANGE),\r\n        };\r\n        this.ghosts = Object.values(this.ghostsStore);\r\n        this.state = Game.STATE.IS_STOPPED;\r\n        this.startTime = Date.now();\r\n        this.score = 0;\r\n        this.isWin = false;\r\n        this.lives = Game.LIVES_AMOUNT;\r\n        this.isPacManStep = true;\r\n    }\r\n\r\n    start() {\r\n        this.setInitParams();\r\n        setTimeout(() => {\r\n            this.startTime = Date.now();\r\n            this.state = Game.STATE.IS_RUNNING;\r\n        }, 500);\r\n    }\r\n\r\n    setPause() {\r\n        if (this.state === Game.STATE.IS_OVER) return;\r\n        this.state = Game.STATE.IS_STOPPED;\r\n    }\r\n\r\n    continue() {\r\n        if (this.state === Game.STATE.IS_OVER) return;\r\n        this.state = Game.STATE.IS_RUNNING;\r\n    }\r\n\r\n    update() {\r\n        if (this.state === Game.STATE.IS_STOPPED || this.state === Game.STATE.IS_OVER) {\r\n            return;\r\n        }\r\n\r\n        if (this.isPacManStep) {\r\n            this.isPacManStep = !this.isPacManStep;\r\n            this.pacMan.update();\r\n            this.checkAndHandleDotCollision();\r\n        } else {\r\n            this.isPacManStep = !this.isPacManStep;\r\n            this.ghosts.forEach((ghost) => ghost.update());\r\n        }\r\n\r\n        for (let i = 0; i < this.ghosts.length; i++) {\r\n            const ghost = this.ghosts[i];\r\n\r\n            const pacManCell = this.grid.getCellByCoords(this.pacMan.x, this.pacMan.y);\r\n            const ghostCell = this.grid.getCellByCoords(ghost.x, ghost.y);\r\n\r\n            if (\r\n                pacManCell === ghostCell &&\r\n                ghost.state !== Game.GHOST_STATE.IS_GOING_TO_RESPAWN\r\n            ) {\r\n                if (ghost.state === Game.GHOST_STATE.IS_FRIGHTENED) {\r\n                    ghost.goToRespawn();\r\n                } else {\r\n                    this.handleLivesDecrement();\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleLivesDecrement() {\r\n        if (this.lives > 1) {\r\n            this.state = Game.STATE.IS_STOPPED;\r\n            setTimeout(() => {\r\n                this.lives--;\r\n                this.ghosts.forEach((ghost) => ghost.setInitParams());\r\n                this.pacMan.setInitParams();\r\n                setTimeout(() => {\r\n                    this.state = Game.STATE.IS_RUNNING;\r\n                }, 1000);\r\n            }, 1000);\r\n        } else {\r\n            this.lives--;\r\n            this.state = Game.STATE.IS_OVER;\r\n        }\r\n    }\r\n\r\n    checkAndHandleDotCollision() {\r\n        const pacManCell = this.grid.getCellByCoords(this.pacMan.x, this.pacMan.y);\r\n        if (\r\n            pacManCell.type === Game.CELL_TYPE.LITTLE_DOT ||\r\n            pacManCell.type === Game.CELL_TYPE.BIG_DOT\r\n        ) {\r\n            this.score++;\r\n            if (this.score === this.grid.dotsNumber) {\r\n                this.isWin = true;\r\n                this.state = Game.STATE.IS_OVER;\r\n            }\r\n            if (pacManCell.type === Game.CELL_TYPE.BIG_DOT) {\r\n                this.ghosts.forEach((ghost) => {\r\n                    ghost.setFright();\r\n                });\r\n            }\r\n            pacManCell.type = Game.CELL_TYPE.EMPTY;\r\n        }\r\n    }\r\n}\r\n\r\nGame.DIRECTION = {\r\n    RIGHT: 'right',\r\n    LEFT: 'left',\r\n    UP: 'up',\r\n    DOWN: 'down',\r\n};\r\n\r\nGame.CELL_TYPE = {\r\n    EMPTY: 0,\r\n    WALL: 1,\r\n    LITTLE_DOT: 2,\r\n    BIG_DOT: 3,\r\n    PORTAL: 4,\r\n    GHOST_HOME: 6,\r\n    GHOST_HOME_DOOR: 7,\r\n};\r\n\r\nGame.GHOST_TYPE = {\r\n    RED: 'red',\r\n    PINK: 'pink',\r\n    BLUE: 'aqua',\r\n    ORANGE: 'orange',\r\n};\r\n\r\nGame.GHOST_STATE = {\r\n    IS_GOING_OUT: 'isGoingOut',\r\n    IS_GOING_TO_RESPAWN: 'isGoingToRespawn',\r\n    IS_FRIGHTENED: 'isFrightened',\r\n    IS_SCATTERING: 'isScattering',\r\n    IS_CHASING: 'isChasing',\r\n};\r\n\r\nGame.STATE = {\r\n    IS_STOPPED: 'isStopped',\r\n    IS_RUNNING: 'isRunning',\r\n    IS_OVER: 'isOver',\r\n};\r\n\r\nGame.STEP_SIZE = {\r\n    LITTLE: 1,\r\n    NORMAL: 2,\r\n    BIG: 5,\r\n};\r\n\r\nGame.SPEED = {\r\n    SLOW: 1,\r\n    NORMAL: 2,\r\n    FAST: 3,\r\n    SUPER_FAST: 4,\r\n};\r\n\r\nGame.LIVES_AMOUNT = 3;\r\n\r\nexport default Game;\r\n","import Game from './models/game.js';\r\n\r\nclass GameView {\r\n    constructor(game) {\r\n        this.game = game;\r\n        this.canvas = document.getElementById('canvas');\r\n        this.canvas.width = game.grid.width;\r\n        this.canvas.height = game.grid.height;\r\n        this.canvas.style.backgroundColor = 'rgb(92, 92, 92)';\r\n        this.cellSize = game.grid.cellSize;\r\n\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        this.draw(game);\r\n\r\n        this.lastFrameTime = 0;\r\n        this.frameInterval = 10;\r\n        this.gameSpeed = Game.SPEED.NORMAL;\r\n    }\r\n\r\n    _drawPoint(x, y, size, color) {\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.arc(x, y, size, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    _drawRect(x, y, width, height, color) {\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.fillRect(x - width / 2, y - height / 2, width, height);\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    draw(game) {\r\n        const currentTime = Date.now();\r\n        const deltaTime = currentTime - this.lastFrameTime;\r\n\r\n        if (deltaTime > this.frameInterval) {\r\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n            for (let i = this.gameSpeed; i > 0; i--) {\r\n                this.game.update();\r\n            }\r\n            this.drawField(this.game.field);\r\n            this.drawScore(this.game.score);\r\n            this.drawPacMan(this.game.pacMan);\r\n            this.drawLives(this.game.lives);\r\n\r\n            this.game.ghosts.forEach((ghost) => {\r\n                this.drawGhost(ghost);\r\n            });\r\n\r\n            if (this.game.state === Game.STATE.IS_OVER) {\r\n                this.drawGameOver(this.game);\r\n            }\r\n\r\n            this.lastFrameTime = currentTime;\r\n        }\r\n        window.requestAnimationFrame(this.draw.bind(this, game));\r\n    }\r\n\r\n    drawField(field) {\r\n        field.forEach((row) => {\r\n            row.forEach((cell) => {\r\n                if (cell.type === Game.CELL_TYPE.WALL) {\r\n                    this._drawRect(cell.x, cell.y, this.cellSize, this.cellSize, 'black');\r\n                }\r\n                if (cell.type === Game.CELL_TYPE.LITTLE_DOT) {\r\n                    this._drawPoint(cell.x, cell.y, 3, 'orange');\r\n                } else if (cell.type === Game.CELL_TYPE.BIG_DOT) {\r\n                    this._drawPoint(cell.x, cell.y, 6, 'orange');\r\n                } else if (cell.type === Game.CELL_TYPE.GHOST_HOME_DOOR) {\r\n                    this._drawRect(cell.x, cell.y, this.cellSize, 3, 'grey');\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    drawScore(score) {\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'orange';\r\n        this.ctx.font = '20px Arial';\r\n        this.ctx.fillText(`Score: ${score}`, 20, 40);\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawPacMan(pacMan) {\r\n        this._drawPoint(pacMan.x, pacMan.y, 10, 'yellow');\r\n    }\r\n\r\n    drawGhost(ghost) {\r\n        let color;\r\n        if (ghost.state === Game.GHOST_STATE.IS_FRIGHTENED) {\r\n            if (ghost.isBlinking) {\r\n                if (Math.floor(Date.now() / 100) % 2 === 0) {\r\n                    color = ghost.type;\r\n                } else {\r\n                    color = 'blue';\r\n                }\r\n            } else {\r\n                color = 'blue';\r\n            }\r\n        } else if (ghost.state === Game.GHOST_STATE.IS_GOING_TO_RESPAWN) {\r\n            color = 'white';\r\n        } else {\r\n            color = ghost.type;\r\n        }\r\n        this._drawPoint(ghost.x, ghost.y, 10, color);\r\n    }\r\n\r\n    drawLives(lives) {\r\n        const y = 30;\r\n        const x = this.canvas.width - 10;\r\n        const pudding = 2;\r\n\r\n        for (let i = lives; i > 0; i--) {\r\n            this._drawPoint(x - (10 + pudding) * 2 * i, y, 10, 'yellow');\r\n        }\r\n    }\r\n\r\n    drawGameOver(game) {\r\n        const text = game.isWin ? 'YOU WIN' : 'GAME OVER';\r\n        const fontSize = 70; // Размер шрифта\r\n        this.ctx.font = `${fontSize}px Arial`; // Установка шрифта\r\n\r\n        // Измеряем ширину текста, учитывая текущий шрифт\r\n        const textMetrics = this.ctx.measureText(text);\r\n        const textWidth = textMetrics.width;\r\n\r\n        // Вычисляем координаты x и y для центрирования текста\r\n        const x = (this.canvas.width - textWidth) / 2;\r\n        const y = this.canvas.height / 2;\r\n\r\n        // Рисуем полупрозрачный фон\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'; // Черный цвет с прозрачностью 50%\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        // Очищаем холст и рисуем текст\r\n        this.ctx.fillStyle = 'lightgrey';\r\n        this.ctx.fillText(text, x, y);\r\n    }\r\n}\r\n\r\nexport default GameView;\r\n","import GameModel from './models/game.js';\r\nimport GameView from './gameView.js';\r\nimport GameController from './gameController.js';\r\n\r\nexport const initGame = () => {\r\n    const game = new GameModel();\r\n    const view = new GameView(game);\r\n    new GameController(game, view);\r\n};\r\n"],"names":["initField","constructor","game","this","marking","cellSize","colsNum","length","rowsNum","height","width","dotsNumber","map","createMap","result","portal","forEach","row","rowInd","cellType","colInd","cell","x","y","type","Game","CELL_TYPE","LITTLE_DOT","BIG_DOT","PORTAL","exitPortal","exitPoint","leftPortal","rightPortal","getCellByCoords","Math","floor","checkDirection","direction","isGhostHomeOpened","checkedX","checkedY","checkedCell","GHOST_HOME_DOOR","WALL","stepSize","isInCenterCell","grid","isXInCenterCell","isYInCenterCell","move","checkAndHandlePortalCollision","isDirectionsOpposite","checkedDirection","GameController","view","startButton","document","getElementById","stopButton","continueButton","rightButton","leftButton","upButton","downButton","keyDownHandler","bind","addEventListener","start","continue","setPause","pacMan","setNewDirection","DIRECTION","RIGHT","LEFT","UP","DOWN","e","key","MovingCharacter","super","setInitParams","newDirection","updateDirection","update","undefined","targetForScattering","getTargetForScattering","targetForGoingOut","targetForGoingToRespawn","frightenedTimeout","gridWidth","GHOST_TYPE","RED","state","GHOST_STATE","IS_SCATTERING","PINK","IS_GOING_OUT","BLUE","ORANGE","_state","isBlinking","blinkingTimeout","clearTimeout","getTargetForChasing","redGhost","ghostsStore","vectorX","vectorY","sqrt","pow","setFright","isInHome","isInDoor","IS_GOING_TO_RESPAWN","IS_FRIGHTENED","setTimeout","IS_CHASING","frightPeriod","goToRespawn","GHOST_HOME","isScatterTime","lifeTimeInSec","round","Date","now","startTime","getTarget","getDistanceToTarget","target","getNextCellCenterCoords","getNewDirection","directions","isHomeOpened","push","random","optimalDirectionInd","curDistance","ind","distance","STEP_SIZE","LITTLE","BIG","NORMAL","score","movingCharacter","Grid","field","PacMan","Ghost","ghosts","Object","values","STATE","IS_STOPPED","isWin","lives","LIVES_AMOUNT","isPacManStep","IS_RUNNING","IS_OVER","checkAndHandleDotCollision","ghost","i","handleLivesDecrement","pacManCell","EMPTY","SPEED","SLOW","FAST","SUPER_FAST","canvas","style","backgroundColor","ctx","getContext","draw","lastFrameTime","frameInterval","gameSpeed","_drawPoint","size","color","beginPath","fillStyle","arc","PI","fill","closePath","_drawRect","fillRect","currentTime","clearRect","drawField","drawScore","drawPacMan","drawLives","drawGhost","drawGameOver","window","requestAnimationFrame","font","fillText","concat","text","textWidth","measureText","initGame","GameModel","GameView"],"sourceRoot":""}