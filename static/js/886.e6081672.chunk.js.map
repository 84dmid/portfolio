{"version":3,"file":"static/js/886.e6081672.chunk.js","mappings":"mIAEA,MAAMA,EAAY,CACd,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,E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","sources":["components/games/pacMan/models/grid.js","components/games/pacMan/models/movingCharacter.js","components/games/pacMan/gameController.js","components/games/pacMan/models/pacMan.js","components/games/pacMan/models/ghost.js","components/games/pacMan/models/game.js","components/games/pacMan/gameView.js","components/games/pacMan/main.js"],"sourcesContent":["import Game from './game.js';\r\n\r\nconst initField = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n    [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],\r\n    [1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1],\r\n    [1, 3, 1, 0, 0, 1, 2, 1, 0, 0, 0, 1, 2, 1, 1, 2, 1, 0, 0, 0, 1, 2, 1, 0, 0, 1, 3, 1],\r\n    [1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1],\r\n    [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],\r\n    [1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1],\r\n    [1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1],\r\n    [1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1],\r\n    [1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1],\r\n    [0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 1, 1, 1, 7, 7, 1, 1, 1, 2, 1, 1, 2, 1, 0, 0, 0, 0, 0],\r\n    [1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 6, 6, 6, 6, 6, 6, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1],\r\n    [4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 1, 6, 6, 6, 6, 6, 6, 1, 2, 2, 2, 2, 0, 0, 0, 0, 0, 4],\r\n    [1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 6, 6, 6, 6, 6, 6, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1],\r\n    [0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 0, 0, 0, 0, 0],\r\n    [1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1],\r\n    [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],\r\n    [1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1],\r\n    [1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1],\r\n    [1, 3, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 3, 1],\r\n    [1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1],\r\n    [1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1],\r\n    [1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1],\r\n    [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1],\r\n    [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1],\r\n    [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n];\r\n\r\nclass Grid {\r\n    constructor(game) {\r\n        this.marking = initField;\r\n        this.cellSize = 20;\r\n        this.colsNum = this.marking[0].length;\r\n        this.rowsNum = this.marking.length;\r\n        this.height = this.cellSize * this.rowsNum;\r\n        this.width = this.cellSize * this.colsNum;\r\n\r\n        this.dotsNumber = 0;\r\n        this.map = this.createMap();\r\n    }\r\n\r\n    createMap() {\r\n        const result = [];\r\n\r\n        let portal;\r\n\r\n        this.marking.forEach((row, rowInd) => {\r\n            result[rowInd] = [];\r\n            row.forEach((cellType, colInd) => {\r\n                const cell = {\r\n                    x: colInd * this.cellSize + this.cellSize / 2,\r\n                    y: rowInd * this.cellSize + this.cellSize / 2,\r\n                    type: cellType,\r\n                    rowInd,\r\n                    colInd,\r\n                };\r\n                switch (cellType) {\r\n                    case Game.CELL_TYPE.LITTLE_DOT:\r\n                    case Game.CELL_TYPE.BIG_DOT:\r\n                        this.dotsNumber++;\r\n                        break;\r\n                    case Game.CELL_TYPE.PORTAL:\r\n                        if (portal) {\r\n                            portal.exitPortal = cell;\r\n                            cell.exitPortal = portal;\r\n                        } else {\r\n                            portal = cell;\r\n                        }\r\n                        this.exitPoint = this.leftPortal;\r\n                        this.rightPortal = cell;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                result[rowInd][colInd] = cell;\r\n            });\r\n        });\r\n        return result;\r\n    }\r\n\r\n    getCellByCoords(x, y) {\r\n        let rowInd = Math.floor(y / this.cellSize);\r\n        let colInd = Math.floor(x / this.cellSize);\r\n        return this.map[rowInd][colInd];\r\n    }\r\n\r\n    checkDirection(x, y, direction, isGhostHomeOpened) {\r\n        const checkedX = x + direction.x * this.cellSize;\r\n        const checkedY = y + direction.y * this.cellSize;\r\n\r\n        const checkedCell = this.getCellByCoords(checkedX, checkedY);\r\n\r\n        if (checkedCell.type === Game.CELL_TYPE.GHOST_HOME_DOOR) {\r\n            return isGhostHomeOpened;\r\n        }\r\n        if (checkedCell.type === Game.CELL_TYPE.WALL) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default Grid;\r\n","import Game from './game.js';\r\n\r\nclass MovingCharacter {\r\n    constructor(game) {\r\n        this.game = game;\r\n        this.x = null;\r\n        this.y = null;\r\n        this.direction = null;\r\n        this.stepSize = null;\r\n    }\r\n\r\n    isInCenterCell() {\r\n        const cellSize = this.game.grid.cellSize;\r\n\r\n        const isXInCenterCell = (this.x - cellSize / 2) % cellSize === 0;\r\n        const isYInCenterCell = (this.y - cellSize / 2) % cellSize === 0;\r\n\r\n        return isXInCenterCell && isYInCenterCell;\r\n    }\r\n\r\n    move() {\r\n        this.x = this.x + this.direction.x * this.stepSize;\r\n        this.y = this.y + this.direction.y * this.stepSize;\r\n    }\r\n\r\n    checkAndHandlePortalCollision() {\r\n        const cell = this.game.grid.getCellByCoords(this.x, this.y);\r\n        if (cell.type === Game.CELL_TYPE.PORTAL) {\r\n            this.x = cell.exitPortal.x;\r\n            this.y = cell.exitPortal.y;\r\n        }\r\n    }\r\n\r\n    isDirectionsOpposite(checkedDirection) {\r\n        return (\r\n            this.direction.x === -checkedDirection.x &&\r\n            this.direction.y === -checkedDirection.y\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovingCharacter;\r\n","import Game from './models/game.js';\r\n\r\nclass GameController {\r\n    constructor(game, view) {\r\n        this.game = game;\r\n        this.view = view;\r\n\r\n        this.startButton = document.getElementById('startButton');\r\n        this.pauseButton = document.getElementById('pauseButton');\r\n        this.continueButton = document.getElementById('continueButton');\r\n        this.rightButton = document.getElementById('rightButton');\r\n        this.leftButton = document.getElementById('leftButton');\r\n        this.upButton = document.getElementById('upButton');\r\n        this.downButton = document.getElementById('downButton');\r\n\r\n        this.startAndRestartHandler = this.startAndRestartHandler.bind(this);\r\n        this.pauseHandler = this.pauseHandler.bind(this);\r\n        this.continueHandler = this.continueHandler.bind(this);\r\n        this.rightButtonHandler = this.rightButtonHandler.bind(this);\r\n        this.leftButtonHandler = this.leftButtonHandler.bind(this);\r\n        this.upButtonHandler = this.upButtonHandler.bind(this);\r\n        this.downButtonHandler = this.downButtonHandler.bind(this);\r\n        this.keyDownHandler = this.keyDownHandler.bind(this);\r\n        this.exitGameHandler = this.exitGameHandler.bind(this);\r\n\r\n        this.startButton.addEventListener('click', this.startAndRestartHandler);\r\n        this.continueButton.addEventListener('click', this.continueHandler);\r\n        this.pauseButton.addEventListener('click', this.pauseHandler);\r\n        this.rightButton.addEventListener('pointerdown', this.rightButtonHandler);\r\n        this.leftButton.addEventListener('pointerdown', this.leftButtonHandler);\r\n        this.upButton.addEventListener('pointerdown', this.upButtonHandler);\r\n        this.downButton.addEventListener('pointerdown', this.downButtonHandler);\r\n        document.addEventListener('keydown', this.keyDownHandler);\r\n    }\r\n\r\n    pauseHandler() {\r\n        this.game.setPause();\r\n    }\r\n\r\n    continueHandler() {\r\n        this.game.continue();\r\n    }\r\n\r\n    startAndRestartHandler() {\r\n        this.game.start();\r\n    }\r\n\r\n    rightButtonHandler() {\r\n        this.game.pacMan.setNewDirection(GameController.DIRECTION.RIGHT);\r\n    }\r\n    leftButtonHandler() {\r\n        this.game.pacMan.setNewDirection(GameController.DIRECTION.LEFT);\r\n    }\r\n    upButtonHandler() {\r\n        this.game.pacMan.setNewDirection(GameController.DIRECTION.UP);\r\n    }\r\n    downButtonHandler() {\r\n        this.game.pacMan.setNewDirection(GameController.DIRECTION.DOWN);\r\n    }\r\n\r\n    keyDownHandler(e) {\r\n        if (e.key === 'Right' || e.key === 'ArrowRight') {\r\n            this.game.pacMan.setNewDirection(Game.DIRECTION.RIGHT);\r\n        } else if (e.key === 'Left' || e.key === 'ArrowLeft') {\r\n            this.game.pacMan.setNewDirection(Game.DIRECTION.LEFT);\r\n        } else if (e.key === 'Up' || e.key === 'ArrowUp') {\r\n            this.game.pacMan.setNewDirection(Game.DIRECTION.UP);\r\n        } else if (e.key === 'Down' || e.key === 'ArrowDown') {\r\n            this.game.pacMan.setNewDirection(Game.DIRECTION.DOWN);\r\n        }\r\n    }\r\n\r\n    exitGameHandler() {\r\n        this.game.setPause();\r\n        this.view.stopGameLoop();\r\n\r\n        document.removeEventListener('keydown', this.keyDownHandler);\r\n        this.startButton.removeEventListener('click', this.startAndRestartHandler);\r\n        this.pauseButton.removeEventListener('click', this.pauseHandler);\r\n        this.continueButton.removeEventListener('click', this.continueHandler);\r\n        this.rightButton.removeEventListener('pointerdown', this.rightButtonHandler);\r\n        this.leftButton.removeEventListener('pointerdown', this.leftButtonHandler);\r\n        this.upButton.removeEventListener('pointerdown', this.upButtonHandler);\r\n        this.downButton.removeEventListener('pointerdown', this.downButtonHandler);\r\n    }\r\n}\r\n\r\nGameController.DIRECTION = {\r\n    RIGHT: 'right',\r\n    LEFT: 'left',\r\n    UP: 'up',\r\n    DOWN: 'down',\r\n};\r\n\r\nexport default GameController;\r\n","import GameController from '../gameController.js';\r\n\r\nimport MovingCharacter from './movingCharacter.js';\r\n\r\nclass PacMan extends MovingCharacter {\r\n    constructor(game) {\r\n        super();\r\n        this.game = game;\r\n        this.stepSize = 2;\r\n\r\n        this.setInitParams();\r\n    }\r\n\r\n    setInitParams() {\r\n        var grid = this.game.grid;\r\n        this.x = grid.width / 2;\r\n        this.y = 26 * grid.cellSize + grid.cellSize / 2;\r\n        this.direction = { x: 1, y: 0 };\r\n    }\r\n\r\n    setNewDirection(direction) {\r\n        this.newDirection = { x: 0, y: 0 };\r\n        switch (direction) {\r\n            case GameController.DIRECTION.RIGHT:\r\n                this.newDirection.x = 1;\r\n                break;\r\n            case GameController.DIRECTION.LEFT:\r\n                this.newDirection.x = -1;\r\n                break;\r\n            case GameController.DIRECTION.DOWN:\r\n                this.newDirection.y = 1;\r\n                break;\r\n            case GameController.DIRECTION.UP:\r\n                this.newDirection.y = -1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (this.isDirectionsOpposite(this.newDirection)) {\r\n            this.updateDirection();\r\n        }\r\n    }\r\n\r\n    update() {\r\n        if (this.isInCenterCell()) {\r\n            this.checkAndHandlePortalCollision();\r\n            this.updateDirection();\r\n            if (!this.game.grid.checkDirection(this.x, this.y, this.direction)) {\r\n                return;\r\n            }\r\n        }\r\n        this.move();\r\n    }\r\n\r\n    updateDirection() {\r\n        if (\r\n            this.newDirection &&\r\n            this.game.grid.checkDirection(this.x, this.y, this.newDirection)\r\n        ) {\r\n            this.direction = this.newDirection;\r\n            this.newDirection = undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport default PacMan;\r\n","import Game from './game.js';\r\nimport MovingCharacter from './movingCharacter.js';\r\n\r\nclass Ghost extends MovingCharacter {\r\n    constructor(game, type) {\r\n        super();\r\n        this.game = game;\r\n        this.type = type;\r\n\r\n        this.targetForScattering = this.getTargetForScattering();\r\n        this.targetForGoingOut = {\r\n            x: this.game.grid.width / 2,\r\n            y: 14 * this.game.grid.cellSize + this.game.grid.cellSize / 2,\r\n        };\r\n        this.targetForGoingToRespawn = {\r\n            x: this.game.grid.width / 2,\r\n            y: 17 * this.game.grid.cellSize + this.game.grid.cellSize / 2,\r\n        };\r\n\r\n        this.setInitParams();\r\n    }\r\n\r\n    setInitParams() {\r\n        this.direction = { x: -1, y: 0 };\r\n        this.stepSize = 2;\r\n        this.frightenedTimeout = null;\r\n\r\n        const cellSize = this.game.grid.cellSize;\r\n        const gridWidth = this.game.grid.width;\r\n        if (this.type === Game.GHOST_TYPE.RED) {\r\n            const rowInd = 14;\r\n            this.x = gridWidth / 2;\r\n            this.y = rowInd * cellSize + cellSize / 2;\r\n            this.state = Game.GHOST_STATE.IS_SCATTERING;\r\n        } else if (this.type === Game.GHOST_TYPE.PINK) {\r\n            const rowInd = 17;\r\n            this.x = gridWidth / 2 - cellSize;\r\n            this.y = rowInd * cellSize + cellSize / 2;\r\n            this.state = Game.GHOST_STATE.IS_GOING_OUT;\r\n        } else if (this.type === Game.GHOST_TYPE.BLUE) {\r\n            const rowInd = 17;\r\n            this.x = gridWidth / 2;\r\n            this.y = rowInd * cellSize + cellSize / 2;\r\n            this.state = Game.GHOST_STATE.IS_SCATTERING;\r\n        } else if (this.type === Game.GHOST_TYPE.ORANGE) {\r\n            const rowInd = 17;\r\n            this.x = gridWidth / 2 + cellSize;\r\n            this.y = rowInd * cellSize + cellSize / 2;\r\n            this.state = Game.GHOST_STATE.IS_SCATTERING;\r\n        }\r\n    }\r\n\r\n    get state() {\r\n        return this._state;\r\n    }\r\n\r\n    set state(state) {\r\n        this._state = state;\r\n        if (this.isBlinking) {\r\n            this.isBlinking = false;\r\n        }\r\n        if (this.blinkingTimeout) {\r\n            clearTimeout(this.blinkingTimeout);\r\n        }\r\n    }\r\n\r\n    getTargetForScattering() {\r\n        switch (this.type) {\r\n            case Game.GHOST_TYPE.RED:\r\n                return {\r\n                    x: 26 * this.game.grid.map.length - this.game.grid.cellSize / 2,\r\n                    y: this.game.grid.cellSize / 2,\r\n                };\r\n            case Game.GHOST_TYPE.PINK:\r\n                return {\r\n                    x: 3 * this.game.grid.cellSize - this.game.grid.cellSize / 2,\r\n                    y: this.game.grid.cellSize / 2,\r\n                };\r\n            case Game.GHOST_TYPE.BLUE:\r\n                return {\r\n                    x: 26 * this.game.grid.cellSize - this.game.grid.cellSize / 2,\r\n                    y:\r\n                        this.game.grid.map.length * this.game.grid.cellSize -\r\n                        this.game.grid.cellSize / 2,\r\n                };\r\n            case Game.GHOST_TYPE.ORANGE:\r\n                return {\r\n                    x: 3 * this.game.grid.cellSize - this.game.grid.cellSize / 2,\r\n                    y:\r\n                        this.game.grid.map.length * this.game.grid.cellSize -\r\n                        this.game.grid.cellSize / 2,\r\n                };\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getTargetForChasing() {\r\n        const pacMan = this.game.pacMan;\r\n        const targetFinder = {\r\n            [Game.GHOST_TYPE.RED]: function () {\r\n                return { x: pacMan.x, y: pacMan.y };\r\n            },\r\n\r\n            [Game.GHOST_TYPE.PINK]: function () {\r\n                const cellSize = this.game.grid.cellSize;\r\n                const offset = 4;\r\n                return {\r\n                    x: pacMan.x + pacMan.direction.x * offset * cellSize,\r\n                    y: pacMan.y + pacMan.direction.y * offset * cellSize,\r\n                };\r\n            }.bind(this),\r\n\r\n            [Game.GHOST_TYPE.BLUE]: function () {\r\n                const redGhost = this.game.ghostsStore[Game.GHOST_TYPE.RED];\r\n                const vectorX = 2 * (redGhost.x - pacMan.x);\r\n                const vectorY = 2 * (redGhost.y - pacMan.y);\r\n                return { x: redGhost.x + vectorX, y: redGhost.y + vectorY };\r\n            }.bind(this),\r\n\r\n            [Game.GHOST_TYPE.ORANGE]: function () {\r\n                const cellSize = this.game.grid.cellSize;\r\n                const toPacManDistance = Math.sqrt(\r\n                    Math.pow(this.x - pacMan.x, 2) + Math.pow(this.y - pacMan.y, 2)\r\n                );\r\n                const detectionDistance = 8 * cellSize;\r\n                if (toPacManDistance > detectionDistance) {\r\n                    return {\r\n                        x: this.targetForScattering.x,\r\n                        y: this.targetForScattering.y,\r\n                    };\r\n                } else {\r\n                    return { x: pacMan.x, y: pacMan.y };\r\n                }\r\n            }.bind(this),\r\n        };\r\n        return targetFinder[this.type]();\r\n    }\r\n\r\n    setFright() {\r\n        if (\r\n            this.isInHome() ||\r\n            this.isInDoor() ||\r\n            this.state === Game.GHOST_STATE.IS_GOING_TO_RESPAWN\r\n        ) {\r\n            return;\r\n        }\r\n        const frightPeriod = 15000;\r\n        const blinkPeriod = 3000;\r\n\r\n        this.state = Game.GHOST_STATE.IS_FRIGHTENED;\r\n        this.direction.x = -this.direction.x;\r\n        this.direction.y = -this.direction.y;\r\n\r\n        if (this.frightenedTimeout) {\r\n            clearTimeout(this.frightenedTimeout);\r\n        }\r\n        this.frightenedTimeout = setTimeout(() => {\r\n            this.state = Game.GHOST_STATE.IS_CHASING;\r\n        }, frightPeriod);\r\n        this.blinkingTimeout = setTimeout(() => {\r\n            this.isBlinking = true;\r\n        }, frightPeriod - blinkPeriod);\r\n    }\r\n\r\n    goToRespawn() {\r\n        this.state = Game.GHOST_STATE.IS_GOING_TO_RESPAWN;\r\n    }\r\n\r\n    isInHome() {\r\n        const curCell = this.game.grid.getCellByCoords(this.x, this.y);\r\n        return curCell.type === Game.CELL_TYPE.GHOST_HOME;\r\n    }\r\n\r\n    isInDoor() {\r\n        const curCell = this.game.grid.getCellByCoords(this.x, this.y);\r\n        return curCell.type === Game.CELL_TYPE.GHOST_HOME_DOOR;\r\n    }\r\n\r\n    isScatterTime() {\r\n        const lifeTimeInSec = Math.round((Date.now() - this.game.startTime) / 1000);\r\n        return (\r\n            lifeTimeInSec < 7 ||\r\n            (lifeTimeInSec > 27 && lifeTimeInSec < 34) ||\r\n            (lifeTimeInSec > 54 && lifeTimeInSec < 61) ||\r\n            (lifeTimeInSec > 81 && lifeTimeInSec < 85)\r\n        );\r\n    }\r\n\r\n    getTarget() {\r\n        switch (this.state) {\r\n            case Game.GHOST_STATE.IS_SCATTERING:\r\n                return this.targetForScattering;\r\n            case Game.GHOST_STATE.IS_CHASING:\r\n                return this.getTargetForChasing();\r\n            case Game.GHOST_STATE.IS_FRIGHTENED:\r\n                return null;\r\n            case Game.GHOST_STATE.IS_GOING_TO_RESPAWN:\r\n                return this.targetForGoingToRespawn;\r\n            case Game.GHOST_STATE.IS_GOING_OUT:\r\n                return this.targetForGoingOut;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getDistanceToTarget(x, y) {\r\n        let target = this.getTarget();\r\n        return Math.sqrt(Math.pow(target.x - x, 2) + Math.pow(target.y - y, 2));\r\n    }\r\n\r\n    getNextCellCenterCoords(direction) {\r\n        return {\r\n            x: this.x + direction.x * this.game.grid.cellSize,\r\n            y: this.y + direction.y * this.game.grid.cellSize,\r\n        };\r\n    }\r\n\r\n    getNewDirection() {\r\n        const directions = [];\r\n        [\r\n            { x: 1, y: 0 },\r\n            { x: -1, y: 0 },\r\n            { x: 0, y: -1 },\r\n            { x: 0, y: 1 },\r\n        ].forEach((direction) => {\r\n            if (!this.isDirectionsOpposite(direction)) {\r\n                const isHomeOpened =\r\n                    this.state === Game.GHOST_STATE.IS_GOING_OUT ||\r\n                    this.state === Game.GHOST_STATE.IS_GOING_TO_RESPAWN;\r\n                if (\r\n                    this.game.grid.checkDirection(this.x, this.y, direction, isHomeOpened)\r\n                ) {\r\n                    directions.push({ ...direction });\r\n                }\r\n            }\r\n        });\r\n\r\n        if (directions.length === 1) {\r\n            return directions[0];\r\n        }\r\n\r\n        if (this.state === Game.GHOST_STATE.IS_FRIGHTENED) {\r\n            return directions[Math.floor(Math.random() * directions.length)];\r\n        }\r\n\r\n        let optimalDirectionInd, curDistance;\r\n        directions.forEach((direction, ind) => {\r\n            const { x, y } = this.getNextCellCenterCoords(direction);\r\n            const distance = this.getDistanceToTarget(x, y);\r\n            if (!curDistance || distance < curDistance) {\r\n                curDistance = distance;\r\n                optimalDirectionInd = ind;\r\n            }\r\n        });\r\n\r\n        return directions[optimalDirectionInd];\r\n    }\r\n\r\n    update() {\r\n        if (this.isInCenterCell()) {\r\n            this.checkAndHandlePortalCollision();\r\n            this.direction = this.getNewDirection();\r\n\r\n            if (this.state === Game.GHOST_STATE.IS_FRIGHTENED) {\r\n                this.stepSize = Game.STEP_SIZE.LITTLE;\r\n            } else if (this.state === Game.GHOST_STATE.IS_GOING_TO_RESPAWN) {\r\n                this.stepSize = Game.STEP_SIZE.BIG;\r\n            } else {\r\n                this.stepSize = Game.STEP_SIZE.NORMAL;\r\n            }\r\n\r\n            if (this.isInHome()) {\r\n                if (this.state === Game.GHOST_STATE.IS_GOING_TO_RESPAWN) {\r\n                    this.state = Game.GHOST_STATE.IS_GOING_OUT;\r\n                }\r\n                if (this.game.score > 30 && this.type === Game.GHOST_TYPE.BLUE) {\r\n                    this.state = Game.GHOST_STATE.IS_GOING_OUT;\r\n                } else if (this.game.score > 90 && this.type === Game.GHOST_TYPE.ORANGE) {\r\n                    this.state = Game.GHOST_STATE.IS_GOING_OUT;\r\n                }\r\n            } else {\r\n                if (this.isScatterTime()) {\r\n                    if (\r\n                        this.state === Game.GHOST_STATE.IS_GOING_OUT ||\r\n                        this.state === Game.GHOST_STATE.IS_CHASING\r\n                    ) {\r\n                        this.state = Game.GHOST_STATE.IS_SCATTERING;\r\n                    }\r\n                } else {\r\n                    if (\r\n                        this.state === Game.GHOST_STATE.IS_SCATTERING ||\r\n                        this.state === Game.GHOST_STATE.IS_GOING_OUT\r\n                    ) {\r\n                        this.state = Game.GHOST_STATE.IS_CHASING;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.move();\r\n    }\r\n}\r\n\r\nexport default Ghost;\r\n","import Grid from './grid.js';\r\nimport MovingCharacter from './movingCharacter.js';\r\nimport PacMan from './pacMan.js';\r\nimport Ghost from './ghost.js';\r\n\r\nclass Game {\r\n    constructor() {\r\n        this.setInitParams();\r\n    }\r\n\r\n    setInitParams() {\r\n        this.movingCharacter = new MovingCharacter(this);\r\n        this.grid = new Grid(this);\r\n        this.field = this.grid.map;\r\n        this.pacMan = new PacMan(this);\r\n        this.ghostsStore = {\r\n            [Game.GHOST_TYPE.RED]: new Ghost(this, Game.GHOST_TYPE.RED),\r\n            [Game.GHOST_TYPE.PINK]: new Ghost(this, Game.GHOST_TYPE.PINK),\r\n            [Game.GHOST_TYPE.BLUE]: new Ghost(this, Game.GHOST_TYPE.BLUE),\r\n            [Game.GHOST_TYPE.ORANGE]: new Ghost(this, Game.GHOST_TYPE.ORANGE),\r\n        };\r\n        this.ghosts = Object.values(this.ghostsStore);\r\n        this.state = Game.STATE.IS_STOPPED;\r\n        this.startTime = Date.now();\r\n        this.score = 0;\r\n        this.isWin = false;\r\n        this.lives = Game.LIVES_AMOUNT;\r\n        this.isPacManStep = true;\r\n    }\r\n\r\n    start() {\r\n        this.setInitParams();\r\n        setTimeout(() => {\r\n            this.startTime = Date.now();\r\n            this.state = Game.STATE.IS_RUNNING;\r\n        }, 500);\r\n    }\r\n\r\n    setPause() {\r\n        if (this.state === Game.STATE.IS_OVER) return;\r\n        this.state = Game.STATE.IS_STOPPED;\r\n    }\r\n\r\n    continue() {\r\n        if (this.state === Game.STATE.IS_OVER) return;\r\n        this.state = Game.STATE.IS_RUNNING;\r\n    }\r\n\r\n    update() {\r\n        if (this.state === Game.STATE.IS_STOPPED || this.state === Game.STATE.IS_OVER) {\r\n            return;\r\n        }\r\n\r\n        if (this.isPacManStep) {\r\n            this.isPacManStep = !this.isPacManStep;\r\n            this.pacMan.update();\r\n            this.checkAndHandleDotCollision();\r\n        } else {\r\n            this.isPacManStep = !this.isPacManStep;\r\n            this.ghosts.forEach((ghost) => ghost.update());\r\n        }\r\n\r\n        for (let i = 0; i < this.ghosts.length; i++) {\r\n            const ghost = this.ghosts[i];\r\n\r\n            const pacManCell = this.grid.getCellByCoords(this.pacMan.x, this.pacMan.y);\r\n            const ghostCell = this.grid.getCellByCoords(ghost.x, ghost.y);\r\n\r\n            if (\r\n                pacManCell === ghostCell &&\r\n                ghost.state !== Game.GHOST_STATE.IS_GOING_TO_RESPAWN\r\n            ) {\r\n                if (ghost.state === Game.GHOST_STATE.IS_FRIGHTENED) {\r\n                    ghost.goToRespawn();\r\n                } else {\r\n                    this.handleLivesDecrement();\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleLivesDecrement() {\r\n        if (this.lives > 1) {\r\n            this.state = Game.STATE.IS_STOPPED;\r\n            setTimeout(() => {\r\n                this.lives--;\r\n                this.ghosts.forEach((ghost) => ghost.setInitParams());\r\n                this.pacMan.setInitParams();\r\n                setTimeout(() => {\r\n                    this.state = Game.STATE.IS_RUNNING;\r\n                }, 1000);\r\n            }, 1000);\r\n        } else {\r\n            this.lives--;\r\n            this.state = Game.STATE.IS_OVER;\r\n        }\r\n    }\r\n\r\n    checkAndHandleDotCollision() {\r\n        const pacManCell = this.grid.getCellByCoords(this.pacMan.x, this.pacMan.y);\r\n        if (\r\n            pacManCell.type === Game.CELL_TYPE.LITTLE_DOT ||\r\n            pacManCell.type === Game.CELL_TYPE.BIG_DOT\r\n        ) {\r\n            this.score++;\r\n            if (this.score === this.grid.dotsNumber) {\r\n                this.isWin = true;\r\n                this.state = Game.STATE.IS_OVER;\r\n            }\r\n            if (pacManCell.type === Game.CELL_TYPE.BIG_DOT) {\r\n                this.ghosts.forEach((ghost) => {\r\n                    ghost.setFright();\r\n                });\r\n            }\r\n            pacManCell.type = Game.CELL_TYPE.EMPTY;\r\n        }\r\n    }\r\n}\r\n\r\nGame.DIRECTION = {\r\n    RIGHT: 'right',\r\n    LEFT: 'left',\r\n    UP: 'up',\r\n    DOWN: 'down',\r\n};\r\n\r\nGame.CELL_TYPE = {\r\n    EMPTY: 0,\r\n    WALL: 1,\r\n    LITTLE_DOT: 2,\r\n    BIG_DOT: 3,\r\n    PORTAL: 4,\r\n    GHOST_HOME: 6,\r\n    GHOST_HOME_DOOR: 7,\r\n};\r\n\r\nGame.GHOST_TYPE = {\r\n    RED: 'red',\r\n    PINK: 'pink',\r\n    BLUE: 'aqua',\r\n    ORANGE: 'orange',\r\n};\r\n\r\nGame.GHOST_STATE = {\r\n    IS_GOING_OUT: 'isGoingOut',\r\n    IS_GOING_TO_RESPAWN: 'isGoingToRespawn',\r\n    IS_FRIGHTENED: 'isFrightened',\r\n    IS_SCATTERING: 'isScattering',\r\n    IS_CHASING: 'isChasing',\r\n};\r\n\r\nGame.STATE = {\r\n    IS_STOPPED: 'isStopped',\r\n    IS_RUNNING: 'isRunning',\r\n    IS_OVER: 'isOver',\r\n};\r\n\r\nGame.STEP_SIZE = {\r\n    LITTLE: 1,\r\n    NORMAL: 2,\r\n    BIG: 5,\r\n};\r\n\r\nGame.SPEED = {\r\n    SLOW: 1,\r\n    NORMAL: 2,\r\n    FAST: 3,\r\n    SUPER_FAST: 4,\r\n};\r\n\r\nGame.LIVES_AMOUNT = 3;\r\n\r\nexport default Game;\r\n","import Game from './models/game.js';\r\n\r\nclass GameView {\r\n    constructor(game) {\r\n        this.game = game;\r\n        this.canvas = document.getElementById('canvas');\r\n        this.canvas.width = game.grid.width;\r\n        this.canvas.height = game.grid.height;\r\n        this.canvas.style.backgroundColor = 'rgb(92, 92, 92)';\r\n        this.cellSize = game.grid.cellSize;\r\n\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        this.draw(game);\r\n\r\n        this.frameRequestId = null;\r\n\r\n        this.gameSpeed = Game.SPEED.NORMAL;\r\n    }\r\n\r\n    stopGameLoop() {\r\n        if (this.frameRequestId) {\r\n            cancelAnimationFrame(this.frameRequestId);\r\n            this.frameRequestId = null;\r\n        }\r\n    }\r\n\r\n    _drawPoint(x, y, size, color) {\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.arc(x, y, size, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    _drawRect(x, y, width, height, color) {\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.fillRect(x - width / 2, y - height / 2, width, height);\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    draw(game) {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        for (let i = this.gameSpeed; i > 0; i--) {\r\n            this.game.update();\r\n        }\r\n        this.drawField(this.game.field);\r\n        this.drawScore(this.game.score);\r\n        this.drawPacMan(this.game.pacMan);\r\n        this.drawLives(this.game.lives);\r\n\r\n        this.game.ghosts.forEach((ghost) => {\r\n            this.drawGhost(ghost);\r\n        });\r\n\r\n        if (this.game.state === Game.STATE.IS_OVER) {\r\n            this.drawGameOver(this.game);\r\n        }\r\n\r\n        this.frameRequestId = window.requestAnimationFrame(this.draw.bind(this, game));\r\n    }\r\n\r\n    drawField(field) {\r\n        field.forEach((row) => {\r\n            row.forEach((cell) => {\r\n                if (cell.type === Game.CELL_TYPE.WALL) {\r\n                    this._drawRect(cell.x, cell.y, this.cellSize, this.cellSize, 'black');\r\n                }\r\n                if (cell.type === Game.CELL_TYPE.LITTLE_DOT) {\r\n                    this._drawPoint(cell.x, cell.y, 3, 'orange');\r\n                } else if (cell.type === Game.CELL_TYPE.BIG_DOT) {\r\n                    this._drawPoint(cell.x, cell.y, 6, 'orange');\r\n                } else if (cell.type === Game.CELL_TYPE.GHOST_HOME_DOOR) {\r\n                    this._drawRect(cell.x, cell.y, this.cellSize, 3, 'grey');\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    drawScore(score) {\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'orange';\r\n        this.ctx.font = '20px Arial';\r\n        this.ctx.fillText(`Score: ${score}`, 20, 40);\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawPacMan(pacMan) {\r\n        this._drawPoint(pacMan.x, pacMan.y, 10, 'yellow');\r\n    }\r\n\r\n    drawGhost(ghost) {\r\n        let color;\r\n        if (ghost.state === Game.GHOST_STATE.IS_FRIGHTENED) {\r\n            if (ghost.isBlinking) {\r\n                if (Math.floor(Date.now() / 100) % 2 === 0) {\r\n                    color = ghost.type;\r\n                } else {\r\n                    color = 'blue';\r\n                }\r\n            } else {\r\n                color = 'blue';\r\n            }\r\n        } else if (ghost.state === Game.GHOST_STATE.IS_GOING_TO_RESPAWN) {\r\n            color = 'white';\r\n        } else {\r\n            color = ghost.type;\r\n        }\r\n        this._drawPoint(ghost.x, ghost.y, 10, color);\r\n    }\r\n\r\n    drawLives(lives) {\r\n        const y = 30;\r\n        const x = this.canvas.width - 10;\r\n        const pudding = 2;\r\n\r\n        for (let i = lives; i > 0; i--) {\r\n            this._drawPoint(x - (10 + pudding) * 2 * i, y, 10, 'yellow');\r\n        }\r\n    }\r\n\r\n    drawGameOver(game) {\r\n        const text = game.isWin ? 'YOU WIN' : 'GAME OVER';\r\n        const fontSize = 70; // Размер шрифта\r\n        this.ctx.font = `${fontSize}px Arial`; // Установка шрифта\r\n\r\n        // Измеряем ширину текста, учитывая текущий шрифт\r\n        const textMetrics = this.ctx.measureText(text);\r\n        const textWidth = textMetrics.width;\r\n\r\n        // Вычисляем координаты x и y для центрирования текста\r\n        const x = (this.canvas.width - textWidth) / 2;\r\n        const y = this.canvas.height / 2;\r\n\r\n        // Рисуем полупрозрачный фон\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'; // Черный цвет с прозрачностью 50%\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        // Очищаем холст и рисуем текст\r\n        this.ctx.fillStyle = 'lightgrey';\r\n        this.ctx.fillText(text, x, y);\r\n    }\r\n}\r\n\r\nexport default GameView;\r\n","import GameModel from './models/game.js';\r\nimport GameView from './gameView.js';\r\nimport GameController from './gameController.js';\r\n\r\nexport const initGame = () => {\r\n    const game = new GameModel();\r\n    const view = new GameView(game);\r\n    const controller = new GameController(game, view);\r\n\r\n    return controller.exitGameHandler;\r\n};\r\n"],"names":["initField","constructor","game","this","marking","cellSize","colsNum","length","rowsNum","height","width","dotsNumber","map","createMap","result","portal","forEach","row","rowInd","cellType","colInd","cell","x","y","type","Game","CELL_TYPE","LITTLE_DOT","BIG_DOT","PORTAL","exitPortal","exitPoint","leftPortal","rightPortal","getCellByCoords","Math","floor","checkDirection","direction","isGhostHomeOpened","checkedX","checkedY","checkedCell","GHOST_HOME_DOOR","WALL","stepSize","isInCenterCell","grid","isXInCenterCell","isYInCenterCell","move","checkAndHandlePortalCollision","isDirectionsOpposite","checkedDirection","GameController","view","startButton","document","getElementById","pauseButton","continueButton","rightButton","leftButton","upButton","downButton","startAndRestartHandler","bind","pauseHandler","continueHandler","rightButtonHandler","leftButtonHandler","upButtonHandler","downButtonHandler","keyDownHandler","exitGameHandler","addEventListener","setPause","continue","start","pacMan","setNewDirection","DIRECTION","RIGHT","LEFT","UP","DOWN","e","key","stopGameLoop","removeEventListener","MovingCharacter","super","setInitParams","newDirection","updateDirection","update","undefined","targetForScattering","getTargetForScattering","targetForGoingOut","targetForGoingToRespawn","frightenedTimeout","gridWidth","GHOST_TYPE","RED","state","GHOST_STATE","IS_SCATTERING","PINK","IS_GOING_OUT","BLUE","ORANGE","_state","isBlinking","blinkingTimeout","clearTimeout","getTargetForChasing","redGhost","ghostsStore","vectorX","vectorY","sqrt","pow","setFright","isInHome","isInDoor","IS_GOING_TO_RESPAWN","IS_FRIGHTENED","setTimeout","IS_CHASING","frightPeriod","goToRespawn","GHOST_HOME","isScatterTime","lifeTimeInSec","round","Date","now","startTime","getTarget","getDistanceToTarget","target","getNextCellCenterCoords","getNewDirection","directions","isHomeOpened","push","random","optimalDirectionInd","curDistance","ind","distance","STEP_SIZE","LITTLE","BIG","NORMAL","score","movingCharacter","Grid","field","PacMan","Ghost","ghosts","Object","values","STATE","IS_STOPPED","isWin","lives","LIVES_AMOUNT","isPacManStep","IS_RUNNING","IS_OVER","checkAndHandleDotCollision","ghost","i","handleLivesDecrement","pacManCell","EMPTY","SPEED","SLOW","FAST","SUPER_FAST","canvas","style","backgroundColor","ctx","getContext","draw","frameRequestId","gameSpeed","cancelAnimationFrame","_drawPoint","size","color","beginPath","fillStyle","arc","PI","fill","closePath","_drawRect","fillRect","clearRect","drawField","drawScore","drawPacMan","drawLives","drawGhost","drawGameOver","window","requestAnimationFrame","font","fillText","concat","text","textWidth","measureText","initGame","GameModel","GameView"],"sourceRoot":""}