{"version":3,"file":"static/js/47.6cac519e.chunk.js","mappings":"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","sources":["components/games/snake/gameController.js","components/games/snake/gameModel.js","components/games/snake/gameView.js","components/games/snake/main.js"],"sourcesContent":["class GameController {\r\n    constructor(game, view) {\r\n        this.game = game;\r\n        this.view = view;\r\n\r\n        this.startButton = document.getElementById('startButton');\r\n        this.pauseButton = document.getElementById('pauseButton');\r\n        this.continueButton = document.getElementById('continueButton');\r\n        this.rightButton = document.getElementById('rightButton');\r\n        this.leftButton = document.getElementById('leftButton');\r\n        this.upButton = document.getElementById('upButton');\r\n        this.downButton = document.getElementById('downButton');\r\n\r\n        this.startAndRestartHandler = this.startAndRestartHandler.bind(this);\r\n        this.pauseHandler = this.pauseHandler.bind(this);\r\n        this.continueHandler = this.continueHandler.bind(this);\r\n        this.rightButtonHandler = this.rightButtonHandler.bind(this);\r\n        this.leftButtonHandler = this.leftButtonHandler.bind(this);\r\n        this.upButtonHandler = this.upButtonHandler.bind(this);\r\n        this.downButtonHandler = this.downButtonHandler.bind(this);\r\n        this.keyDownHandler = this.keyDownHandler.bind(this);\r\n        this.exitGameHandler = this.exitGameHandler.bind(this);\r\n\r\n        this.startButton.addEventListener('click', this.startAndRestartHandler);\r\n        this.pauseButton.addEventListener('click', this.pauseHandler);\r\n        this.continueButton.addEventListener('click', this.continueHandler);\r\n        this.rightButton.addEventListener('pointerdown', this.rightButtonHandler);\r\n        this.leftButton.addEventListener('pointerdown', this.leftButtonHandler);\r\n        this.upButton.addEventListener('pointerdown', this.upButtonHandler);\r\n        this.downButton.addEventListener('pointerdown', this.downButtonHandler);\r\n        document.addEventListener('keydown', this.keyDownHandler);\r\n    }\r\n\r\n    pauseHandler() {\r\n        this.game.setPause();\r\n        this.view.stopGameLoop();\r\n    }\r\n\r\n    continueHandler() {\r\n        this.game.continue();\r\n        this.view.startGameLoop();\r\n    }\r\n\r\n    startAndRestartHandler() {\r\n        this.view.stopGameLoop();\r\n        this.game.startAndRestart();\r\n        this.view.startGameLoop();\r\n    }\r\n\r\n    rightButtonHandler() {\r\n        this.game.setNewDirection(GameController.DIRECTION.RIGHT);\r\n    }\r\n    leftButtonHandler() {\r\n        this.game.setNewDirection(GameController.DIRECTION.LEFT);\r\n    }\r\n    upButtonHandler() {\r\n        this.game.setNewDirection(GameController.DIRECTION.UP);\r\n    }\r\n    downButtonHandler() {\r\n        this.game.setNewDirection(GameController.DIRECTION.DOWN);\r\n    }\r\n\r\n    keyDownHandler(e) {\r\n        const key = e.key;\r\n        switch (key) {\r\n            case 'Right':\r\n            case 'ArrowRight':\r\n                this.game.setNewDirection(GameController.DIRECTION.RIGHT);\r\n                break;\r\n            case 'Left':\r\n            case 'ArrowLeft':\r\n                this.game.setNewDirection(GameController.DIRECTION.LEFT);\r\n                break;\r\n            case 'Up':\r\n            case 'ArrowUp':\r\n                this.game.setNewDirection(GameController.DIRECTION.UP);\r\n                break;\r\n            case 'Down':\r\n            case 'ArrowDown':\r\n                this.game.setNewDirection(GameController.DIRECTION.DOWN);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    exitGameHandler() {\r\n        this.game.setPause();\r\n        this.view.stopGameLoop();\r\n\r\n        document.removeEventListener('keydown', this.keyDownHandler);\r\n        this.startButton.removeEventListener('click', this.startAndRestartHandler);\r\n        this.pauseButton.removeEventListener('click', this.pauseHandler);\r\n        this.continueButton.removeEventListener('click', this.continueHandler);\r\n        this.rightButton.removeEventListener('pointerdown', this.rightButtonHandler);\r\n        this.leftButton.removeEventListener('pointerdown', this.leftButtonHandler);\r\n        this.upButton.removeEventListener('pointerdown', this.upButtonHandler);\r\n        this.downButton.removeEventListener('pointerdown', this.downButtonHandler);\r\n    }\r\n}\r\n\r\nGameController.DIRECTION = {\r\n    RIGHT: 'right',\r\n    LEFT: 'left',\r\n    UP: 'up',\r\n    DOWN: 'down',\r\n};\r\n\r\nexport default GameController;\r\n","import GameController from './gameController.js';\r\n\r\nclass GameModel {\r\n    constructor() {\r\n        this.grid = {\r\n            width: 20,\r\n            height: 15,\r\n        };\r\n        this.box = {};\r\n        this.snake = {\r\n            initHead: {\r\n                x: Math.floor(this.grid.width / 2),\r\n                y: Math.floor(this.grid.height / 2),\r\n            },\r\n        };\r\n\r\n        this.setInitParams();\r\n    }\r\n\r\n    setInitParams() {\r\n        this.state = GameModel.STATE.STOPPED;\r\n        this.score = 0;\r\n        this.isWin = false;\r\n        this.initSnake();\r\n    }\r\n\r\n    initSnake() {\r\n        this.snake.body = [\r\n            {\r\n                x: this.snake.initHead.x,\r\n                y: this.snake.initHead.y,\r\n            },\r\n            {\r\n                x: this.snake.initHead.x - 1,\r\n                y: this.snake.initHead.y,\r\n            },\r\n            {\r\n                x: this.snake.initHead.x - 2,\r\n                y: this.snake.initHead.y,\r\n            },\r\n        ];\r\n        this.snake.direction = { x: 1, y: 0 };\r\n        this.snake.newDirection = undefined;\r\n        this.snake.isGrowing = false;\r\n        this.snake.stepSize = 1;\r\n        this.snake.stepTime = 300;\r\n    }\r\n\r\n    updateBoxPosition() {\r\n        if (this.snake.body.length === this.grid.height * this.grid.width) return;\r\n        const positionVariants = [];\r\n        for (let x = 0; x < this.grid.width; x++) {\r\n            for (let y = 0; y < this.grid.height; y++) {\r\n                if (this.snake.body.some((box) => box.x === x && box.y === y)) continue;\r\n                positionVariants.push({ x, y });\r\n            }\r\n        }\r\n        this.box = positionVariants[Math.floor(positionVariants.length * Math.random())];\r\n    }\r\n\r\n    startAndRestart() {\r\n        this.setInitParams();\r\n        this.updateBoxPosition();\r\n        this.state = GameModel.STATE.RUNNING;\r\n    }\r\n\r\n    setPause() {\r\n        if (this.state === GameModel.STATE.OVER) return;\r\n        this.state = GameModel.STATE.STOPPED;\r\n    }\r\n\r\n    continue() {\r\n        if (this.state === GameModel.STATE.OVER) return;\r\n        this.state = GameModel.STATE.RUNNING;\r\n    }\r\n\r\n    getNextSnakeHedPosition() {\r\n        const snakeHead = this.snake.body[0];\r\n        const x = snakeHead.x + this.snake.direction.x * this.snake.stepSize;\r\n        const y = snakeHead.y + this.snake.direction.y * this.snake.stepSize;\r\n        return { x, y };\r\n    }\r\n\r\n    updateSnakePosition(newHeadPosition) {\r\n        const { x, y } = newHeadPosition;\r\n        this.snake.body.unshift({ x, y });\r\n\r\n        if (this.snake.isGrowing) {\r\n            this.snake.isGrowing = false;\r\n            return;\r\n        }\r\n        this.snake.body.pop();\r\n    }\r\n\r\n    setNewDirection(direction) {\r\n        const newDirection = { x: 0, y: 0 };\r\n        switch (direction) {\r\n            case GameController.DIRECTION.RIGHT:\r\n                newDirection.x = 1;\r\n                break;\r\n            case GameController.DIRECTION.LEFT:\r\n                newDirection.x = -1;\r\n                break;\r\n            case GameController.DIRECTION.UP:\r\n                newDirection.y = -1;\r\n                break;\r\n            case GameController.DIRECTION.DOWN:\r\n                newDirection.y = 1;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        this.snake.newDirection = newDirection;\r\n    }\r\n\r\n    updateSnakeDirection() {\r\n        if (\r\n            !this.snake.newDirection ||\r\n            this.isDirectionOpposite(this.snake.newDirection)\r\n        ) {\r\n            return;\r\n        }\r\n        this.snake.direction = this.snake.newDirection;\r\n        this.snake.newDirection = undefined;\r\n    }\r\n\r\n    isDirectionOpposite(direction) {\r\n        return (\r\n            this.snake.direction.x === -direction.x ||\r\n            this.snake.direction.y === -direction.y\r\n        );\r\n    }\r\n\r\n    update() {\r\n        if (\r\n            this.state === GameModel.STATE.STOPPED ||\r\n            this.state === GameModel.STATE.OVER\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this.updateSnakeDirection();\r\n\r\n        const newHeadPosition = this.getNextSnakeHedPosition();\r\n        if (\r\n            this.isWallCollision(newHeadPosition) ||\r\n            this.isHimselfCollision(newHeadPosition)\r\n        ) {\r\n            this.state = GameModel.STATE.OVER;\r\n            return;\r\n        }\r\n        this.updateSnakePosition(newHeadPosition);\r\n        if (this.isBoxCollision(newHeadPosition)) {\r\n            this.snake.isGrowing = true;\r\n            this.score++;\r\n            this.updateBoxPosition();\r\n        }\r\n    }\r\n\r\n    isWallCollision(position) {\r\n        const { x, y } = position;\r\n        return x < 0 || x >= this.grid.width || y < 0 || y >= this.grid.height;\r\n    }\r\n\r\n    isHimselfCollision(position) {\r\n        const { x, y } = position;\r\n        return this.snake.body.some((box) => box.x === x && box.y === y);\r\n    }\r\n\r\n    isBoxCollision(position) {\r\n        const { x, y } = position;\r\n        return x === this.box.x && y === this.box.y;\r\n    }\r\n}\r\n\r\nexport default GameModel;\r\n\r\nGameModel.STATE = {\r\n    RUNNING: 'isRunning',\r\n    STOPPED: 'isStopped',\r\n    OVER: 'isOver',\r\n};\r\n","import GameModel from './gameModel.js';\r\n\r\nclass GameView {\r\n    constructor(game) {\r\n        this.game = game;\r\n        this.canvas = document.getElementById('canvas');\r\n        this.boxSize = 20;\r\n        this.canvas.width = game.grid.width * this.boxSize;\r\n        this.canvas.height = game.grid.height * this.boxSize;\r\n        this.canvas.style.backgroundColor = 'rgb(255, 237, 185)';\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        this.previousTime = 0;\r\n        this.gameLoop = this.gameLoop.bind(this);\r\n        this.frameRequestId = null;\r\n\r\n        this.startGameLoop();\r\n    }\r\n\r\n    _drawBox(x, y, color) {\r\n        const canvasX = x * this.boxSize;\r\n        const canvasY = y * this.boxSize;\r\n\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.fillRect(canvasX, canvasY, this.boxSize, this.boxSize);\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    startGameLoop() {\r\n        this.frameRequestId = requestAnimationFrame(this.gameLoop);\r\n    }\r\n\r\n    stopGameLoop() {\r\n        if (this.frameRequestId) {\r\n            cancelAnimationFrame(this.frameRequestId);\r\n            this.frameRequestId = null;\r\n        }\r\n    }\r\n\r\n    gameLoop(timestamp) {\r\n        if (this.previousTime === 0) {\r\n            this.previousTime = timestamp;\r\n        }\r\n        const elapsedTime = timestamp - this.previousTime;\r\n\r\n        if (elapsedTime > this.game.snake.stepTime) {\r\n            this.previousTime = timestamp;\r\n            this.game.update();\r\n            this.draw();\r\n        }\r\n\r\n        if (this.game.state === GameModel.STATE.OVER) {\r\n            this.drawGameOver(this.game);\r\n            this.stopGameLoop();\r\n        } else if (this.game.state === GameModel.STATE.STOPPED) {\r\n            this.draw();\r\n        } else {\r\n            this.frameRequestId = requestAnimationFrame(this.gameLoop);\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.drawSnake(this.game.snake);\r\n        this.drawBox(this.game.box);\r\n        this.drawScore(this.game.score);\r\n    }\r\n\r\n    drawBox(box) {\r\n        this._drawBox(box.x, box.y, 'blue');\r\n    }\r\n\r\n    drawSnake(snake) {\r\n        snake.body.forEach((box, ind) => {\r\n            const color = ind === 0 ? 'red' : 'pink';\r\n            this._drawBox(box.x, box.y, color);\r\n        });\r\n    }\r\n\r\n    drawScore(score) {\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'blue';\r\n        this.ctx.font = '18px Arial';\r\n        this.ctx.fillText(`Score: ${score}`, 10, 22);\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawGameOver(game) {\r\n        const text = game.isWin ? 'YOU WIN' : 'GAME OVER';\r\n        const fontSize = 50; // Размер шрифта\r\n        this.ctx.font = `${fontSize}px Arial`; // Установка шрифта\r\n\r\n        // Измеряем ширину текста, учитывая текущий шрифт\r\n        const textMetrics = this.ctx.measureText(text);\r\n        const textWidth = textMetrics.width;\r\n\r\n        // Вычисляем координаты x и y для центрирования текста\r\n        const x = (this.canvas.width - textWidth) / 2;\r\n        const y = this.canvas.height / 2;\r\n\r\n        // Рисуем полупрозрачный фон\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'; // Черный цвет с прозрачностью 50%\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        // Очищаем холст и рисуем текст\r\n        this.ctx.fillStyle = 'lightgrey';\r\n        this.ctx.fillText(text, x, y);\r\n    }\r\n}\r\n\r\nexport default GameView;\r\n","import GameModel from './gameModel.js';\r\nimport GameView from './gameView.js';\r\nimport GameController from './gameController.js';\r\n\r\nexport const initGame = () => {\r\n    let game = new GameModel();\r\n    let view = new GameView(game);\r\n    let controller = new GameController(game, view);\r\n\r\n    return controller.exitGameHandler;\r\n};\r\n"],"names":["GameController","constructor","game","view","this","startButton","document","getElementById","pauseButton","continueButton","rightButton","leftButton","upButton","downButton","startAndRestartHandler","bind","pauseHandler","continueHandler","rightButtonHandler","leftButtonHandler","upButtonHandler","downButtonHandler","keyDownHandler","exitGameHandler","addEventListener","setPause","stopGameLoop","continue","startGameLoop","startAndRestart","setNewDirection","DIRECTION","RIGHT","LEFT","UP","DOWN","e","key","removeEventListener","GameModel","grid","width","height","box","snake","initHead","x","Math","floor","y","setInitParams","state","STATE","STOPPED","score","isWin","initSnake","body","direction","newDirection","undefined","isGrowing","stepSize","stepTime","updateBoxPosition","length","positionVariants","some","push","random","RUNNING","OVER","getNextSnakeHedPosition","snakeHead","updateSnakePosition","newHeadPosition","unshift","pop","updateSnakeDirection","isDirectionOpposite","update","isWallCollision","isHimselfCollision","isBoxCollision","position","canvas","boxSize","style","backgroundColor","ctx","getContext","previousTime","gameLoop","frameRequestId","_drawBox","color","canvasX","canvasY","beginPath","fillStyle","fillRect","closePath","requestAnimationFrame","cancelAnimationFrame","timestamp","draw","drawGameOver","clearRect","drawSnake","drawBox","drawScore","forEach","ind","font","fillText","concat","text","textWidth","measureText","initGame","GameView"],"sourceRoot":""}