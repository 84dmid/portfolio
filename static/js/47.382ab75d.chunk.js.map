{"version":3,"file":"static/js/47.382ab75d.chunk.js","mappings":"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","sources":["components/games/snake/gameController.js","components/games/snake/gameModel.js","components/games/snake/gameView.js","components/games/snake/main.js"],"sourcesContent":["class GameController {\r\n    constructor(game, view) {\r\n        this.game = game;\r\n        this.view = view;\r\n        this.startButton = document.getElementById('startButton');\r\n        this.pauseButton = document.getElementById('pauseButton');\r\n        this.continueButton = document.getElementById('continueButton');\r\n        this.rightButton = document.getElementById('rightButton');\r\n        this.leftButton = document.getElementById('leftButton');\r\n        this.upButton = document.getElementById('upButton');\r\n        this.downButton = document.getElementById('downButton');\r\n\r\n        this.startButton.addEventListener('click', () => this.startAndRestart());\r\n        this.pauseButton.addEventListener('click', () => this.setPause());\r\n        this.continueButton.addEventListener('click', () => this.continue());\r\n\r\n        document.addEventListener('keydown', (e) => this.keyDownHandler(e));\r\n        this.rightButton.addEventListener('click', () =>\r\n            this.game.setNewDirection(GameController.DIRECTION.RIGHT)\r\n        );\r\n        this.leftButton.addEventListener('click', () =>\r\n            this.game.setNewDirection(GameController.DIRECTION.LEFT)\r\n        );\r\n        this.upButton.addEventListener('click', () =>\r\n            this.game.setNewDirection(GameController.DIRECTION.UP)\r\n        );\r\n        this.downButton.addEventListener('click', () =>\r\n            this.game.setNewDirection(GameController.DIRECTION.DOWN)\r\n        );\r\n    }\r\n\r\n    setPause() {\r\n        this.game.setPause();\r\n        this.view.stopGameLoop();\r\n    }\r\n\r\n    continue() {\r\n        this.game.continue();\r\n        this.view.startGameLoop();\r\n    }\r\n\r\n    startAndRestart() {\r\n        this.view.stopGameLoop();\r\n        this.game.startAndRestart();\r\n        this.view.startGameLoop();\r\n    }\r\n\r\n    keyDownHandler(e) {\r\n        const key = e.key;\r\n        switch (key) {\r\n            case 'Right':\r\n            case 'ArrowRight':\r\n                this.game.setNewDirection(GameController.DIRECTION.RIGHT);\r\n                break;\r\n            case 'Left':\r\n            case 'ArrowLeft':\r\n                this.game.setNewDirection(GameController.DIRECTION.LEFT);\r\n                break;\r\n            case 'Up':\r\n            case 'ArrowUp':\r\n                this.game.setNewDirection(GameController.DIRECTION.UP);\r\n                break;\r\n            case 'Down':\r\n            case 'ArrowDown':\r\n                this.game.setNewDirection(GameController.DIRECTION.DOWN);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nGameController.DIRECTION = {\r\n    RIGHT: 'right',\r\n    LEFT: 'left',\r\n    UP: 'up',\r\n    DOWN: 'down',\r\n};\r\n\r\nexport default GameController;\r\n","import GameController from './gameController.js';\r\n\r\nclass GameModel {\r\n    constructor() {\r\n        this.grid = {\r\n            width: 28,\r\n            height: 36,\r\n        };\r\n        this.box = {};\r\n        this.snake = {\r\n            initHead: {\r\n                x: Math.floor(this.grid.width / 2),\r\n                y: Math.floor(this.grid.height / 2),\r\n            },\r\n        };\r\n\r\n        this.setInitParams();\r\n    }\r\n\r\n    setInitParams() {\r\n        this.state = GameModel.STATE.STOPPED;\r\n        this.score = 0;\r\n        this.isWin = false;\r\n        this.initSnake();\r\n    }\r\n\r\n    initSnake() {\r\n        this.snake.body = [\r\n            {\r\n                x: this.snake.initHead.x,\r\n                y: this.snake.initHead.y,\r\n            },\r\n            {\r\n                x: this.snake.initHead.x - 1,\r\n                y: this.snake.initHead.y,\r\n            },\r\n            {\r\n                x: this.snake.initHead.x - 2,\r\n                y: this.snake.initHead.y,\r\n            },\r\n        ];\r\n        this.snake.direction = { x: 1, y: 0 };\r\n        this.snake.newDirection = undefined;\r\n        this.snake.isGrowing = false;\r\n        this.snake.stepSize = 1;\r\n        this.snake.stepTime = 300;\r\n    }\r\n\r\n    updateBoxPosition() {\r\n        if (this.snake.body.length === this.grid.height * this.grid.width) return;\r\n        const positionVariants = [];\r\n        for (let x = 0; x < this.grid.width; x++) {\r\n            for (let y = 0; y < this.grid.height; y++) {\r\n                if (this.snake.body.some((box) => box.x === x && box.y === y)) continue;\r\n                positionVariants.push({ x, y });\r\n            }\r\n        }\r\n        this.box = positionVariants[Math.floor(positionVariants.length * Math.random())];\r\n    }\r\n\r\n    startAndRestart() {\r\n        this.setInitParams();\r\n        this.updateBoxPosition();\r\n        this.state = GameModel.STATE.RUNNING;\r\n    }\r\n\r\n    setPause() {\r\n        if (this.state === GameModel.STATE.OVER) return;\r\n        this.state = GameModel.STATE.STOPPED;\r\n    }\r\n\r\n    continue() {\r\n        if (this.state === GameModel.STATE.OVER) return;\r\n        this.state = GameModel.STATE.RUNNING;\r\n    }\r\n\r\n    getNextSnakeHedPosition() {\r\n        const snakeHead = this.snake.body[0];\r\n        const x = snakeHead.x + this.snake.direction.x * this.snake.stepSize;\r\n        const y = snakeHead.y + this.snake.direction.y * this.snake.stepSize;\r\n        return { x, y };\r\n    }\r\n\r\n    updateSnakePosition(newHeadPosition) {\r\n        const { x, y } = newHeadPosition;\r\n        this.snake.body.unshift({ x, y });\r\n\r\n        if (this.snake.isGrowing) {\r\n            this.snake.isGrowing = false;\r\n            return;\r\n        }\r\n        this.snake.body.pop();\r\n    }\r\n\r\n    setNewDirection(direction) {\r\n        const newDirection = { x: 0, y: 0 };\r\n        switch (direction) {\r\n            case GameController.DIRECTION.RIGHT:\r\n                newDirection.x = 1;\r\n                break;\r\n            case GameController.DIRECTION.LEFT:\r\n                newDirection.x = -1;\r\n                break;\r\n            case GameController.DIRECTION.UP:\r\n                newDirection.y = -1;\r\n                break;\r\n            case GameController.DIRECTION.DOWN:\r\n                newDirection.y = 1;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        this.snake.newDirection = newDirection;\r\n    }\r\n\r\n    updateSnakeDirection() {\r\n        if (\r\n            !this.snake.newDirection ||\r\n            this.isDirectionOpposite(this.snake.newDirection)\r\n        ) {\r\n            return;\r\n        }\r\n        this.snake.direction = this.snake.newDirection;\r\n        this.snake.newDirection = undefined;\r\n    }\r\n\r\n    isDirectionOpposite(direction) {\r\n        return (\r\n            this.snake.direction.x === -direction.x ||\r\n            this.snake.direction.y === -direction.y\r\n        );\r\n    }\r\n\r\n    update() {\r\n        if (\r\n            this.state === GameModel.STATE.STOPPED ||\r\n            this.state === GameModel.STATE.OVER\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this.updateSnakeDirection();\r\n\r\n        const newHeadPosition = this.getNextSnakeHedPosition();\r\n        if (\r\n            this.isWallCollision(newHeadPosition) ||\r\n            this.isHimselfCollision(newHeadPosition)\r\n        ) {\r\n            this.state = GameModel.STATE.OVER;\r\n            return;\r\n        }\r\n        this.updateSnakePosition(newHeadPosition);\r\n        if (this.isBoxCollision(newHeadPosition)) {\r\n            this.snake.isGrowing = true;\r\n            this.score++;\r\n            this.updateBoxPosition();\r\n        }\r\n    }\r\n\r\n    isWallCollision(position) {\r\n        const { x, y } = position;\r\n        return x < 0 || x >= this.grid.width || y < 0 || y >= this.grid.height;\r\n    }\r\n\r\n    isHimselfCollision(position) {\r\n        const { x, y } = position;\r\n        return this.snake.body.some((box) => box.x === x && box.y === y);\r\n    }\r\n\r\n    isBoxCollision(position) {\r\n        const { x, y } = position;\r\n        return x === this.box.x && y === this.box.y;\r\n    }\r\n}\r\n\r\nexport default GameModel;\r\n\r\nGameModel.STATE = {\r\n    RUNNING: 'isRunning',\r\n    STOPPED: 'isStopped',\r\n    OVER: 'isOver',\r\n};\r\n","import GameModel from './gameModel.js';\r\n\r\nclass GameView {\r\n    constructor(game) {\r\n        this.game = game;\r\n        this.canvas = document.getElementById('canvas');\r\n        this.boxSize = 20;\r\n        this.canvas.width = game.grid.width * this.boxSize;\r\n        this.canvas.height = game.grid.height * this.boxSize;\r\n        this.canvas.style.backgroundColor = 'rgb(255, 237, 185)';\r\n\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.previousTime = 0;\r\n        this.gameLoop = this.gameLoop.bind(this);\r\n        this.frameRequestId = null;\r\n        this.startGameLoop();\r\n    }\r\n\r\n    _drawBox(x, y, color) {\r\n        const canvasX = x * this.boxSize;\r\n        const canvasY = y * this.boxSize;\r\n\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.fillRect(canvasX, canvasY, this.boxSize, this.boxSize);\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    startGameLoop() {\r\n        this.frameRequestId = requestAnimationFrame(this.gameLoop);\r\n    }\r\n\r\n    stopGameLoop() {\r\n        if (this.frameRequestId) {\r\n            cancelAnimationFrame(this.frameRequestId);\r\n            this.frameRequestId = null;\r\n        }\r\n    }\r\n\r\n    gameLoop(timestamp) {\r\n        if (this.previousTime === 0) {\r\n            this.previousTime = timestamp;\r\n        }\r\n        const elapsedTime = timestamp - this.previousTime;\r\n\r\n        if (elapsedTime > this.game.snake.stepTime) {\r\n            this.previousTime = timestamp;\r\n            this.game.update();\r\n            this.draw();\r\n        }\r\n\r\n        if (this.game.state === GameModel.STATE.OVER) {\r\n            this.drawGameOver(this.game);\r\n            this.stopGameLoop();\r\n        } else if (this.game.state === GameModel.STATE.STOPPED) {\r\n            this.draw();\r\n        } else {\r\n            this.frameRequestId = requestAnimationFrame(this.gameLoop);\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.drawSnake(this.game.snake);\r\n        this.drawBox(this.game.box);\r\n        this.drawScore(this.game.score);\r\n    }\r\n\r\n    drawBox(box) {\r\n        this._drawBox(box.x, box.y, 'blue');\r\n    }\r\n\r\n    drawSnake(snake) {\r\n        snake.body.forEach((box, ind) => {\r\n            const color = ind === 0 ? 'red' : 'pink';\r\n            this._drawBox(box.x, box.y, color);\r\n        });\r\n    }\r\n\r\n    drawScore(score) {\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'blue';\r\n        this.ctx.font = '18px Arial';\r\n        this.ctx.fillText(`Score: ${score}`, 10, 22);\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawGameOver(game) {\r\n        const text = game.isWin ? 'YOU WIN' : 'GAME OVER';\r\n        const fontSize = 50; // Размер шрифта\r\n        this.ctx.font = `${fontSize}px Arial`; // Установка шрифта\r\n\r\n        // Измеряем ширину текста, учитывая текущий шрифт\r\n        const textMetrics = this.ctx.measureText(text);\r\n        const textWidth = textMetrics.width;\r\n\r\n        // Вычисляем координаты x и y для центрирования текста\r\n        const x = (this.canvas.width - textWidth) / 2;\r\n        const y = this.canvas.height / 2;\r\n\r\n        // Рисуем полупрозрачный фон\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'; // Черный цвет с прозрачностью 50%\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        // Очищаем холст и рисуем текст\r\n        this.ctx.fillStyle = 'lightgrey';\r\n        this.ctx.fillText(text, x, y);\r\n    }\r\n}\r\n\r\nexport default GameView;\r\n","import GameModel from './gameModel.js';\r\nimport GameView from './gameView.js';\r\nimport GameController from './gameController.js';\r\n\r\nexport const initGame = () => {\r\n    const game = new GameModel();\r\n    const view = new GameView(game);\r\n    new GameController(game, view);\r\n};\r\n"],"names":["GameController","constructor","game","view","this","startButton","document","getElementById","pauseButton","continueButton","rightButton","leftButton","upButton","downButton","addEventListener","startAndRestart","setPause","continue","e","keyDownHandler","setNewDirection","DIRECTION","RIGHT","LEFT","UP","DOWN","stopGameLoop","startGameLoop","key","GameModel","grid","width","height","box","snake","initHead","x","Math","floor","y","setInitParams","state","STATE","STOPPED","score","isWin","initSnake","body","direction","newDirection","undefined","isGrowing","stepSize","stepTime","updateBoxPosition","length","positionVariants","some","push","random","RUNNING","OVER","getNextSnakeHedPosition","snakeHead","updateSnakePosition","newHeadPosition","unshift","pop","updateSnakeDirection","isDirectionOpposite","update","isWallCollision","isHimselfCollision","isBoxCollision","position","canvas","boxSize","style","backgroundColor","ctx","getContext","previousTime","gameLoop","bind","frameRequestId","_drawBox","color","canvasX","canvasY","beginPath","fillStyle","fillRect","closePath","requestAnimationFrame","cancelAnimationFrame","timestamp","draw","drawGameOver","clearRect","drawSnake","drawBox","drawScore","forEach","ind","font","fillText","concat","text","textWidth","measureText","initGame","GameView"],"sourceRoot":""}